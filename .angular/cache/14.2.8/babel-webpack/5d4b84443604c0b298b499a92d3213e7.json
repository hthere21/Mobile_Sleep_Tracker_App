{"ast":null,"code":"\"use strict\";\n/* global module, require */\n\nmodule.exports = function () {\n  \"use strict\"; // Get a promise object. This may be native, or it may be polyfilled\n\n  var ES6Promise = require(\"./promise.js\");\n  /**\n   * thatLooksLikeAPromiseToMe()\n   *\n   * Duck-types a promise.\n   *\n   * @param {object} o\n   * @return {bool} True if this resembles a promise\n   */\n\n\n  function thatLooksLikeAPromiseToMe(o) {\n    return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n  }\n  /**\n   * promisify()\n   *\n   * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n   * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n   * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n   *\n   * @param {function} original - The function to promisify\n   * @param {object} settings - Settings object\n   * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n   * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n   * @return {function} A promisified version of `original`\n   */\n\n\n  return function promisify(original, settings) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var returnMultipleArguments = settings && settings.multiArgs;\n      var target = void 0;\n\n      if (settings && settings.thisArg) {\n        target = settings.thisArg;\n      } else if (settings) {\n        target = settings;\n      } // Return the promisified function\n\n\n      return new ES6Promise(function (resolve, reject) {\n        // Append the callback bound to the context\n        args.push(function callback(err) {\n          if (err) {\n            return reject(err);\n          }\n\n          for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            values[_key2 - 1] = arguments[_key2];\n          }\n\n          if (false === !!returnMultipleArguments) {\n            return resolve(values[0]);\n          }\n\n          resolve(values);\n        }); // Call the function\n\n        var response = original.apply(target, args); // If it looks like original already returns a promise,\n        // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n\n        if (thatLooksLikeAPromiseToMe(response)) {\n          resolve(response);\n        }\n      });\n    };\n  };\n}();","map":{"version":3,"names":["module","exports","ES6Promise","require","thatLooksLikeAPromiseToMe","o","then","catch","promisify","original","settings","_len","arguments","length","args","Array","_key","returnMultipleArguments","multiArgs","target","thisArg","resolve","reject","push","callback","err","_len2","values","_key2","response","apply"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/es6-promisify/dist/promisify.js"],"sourcesContent":["\"use strict\";\n\n/* global module, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    // Get a promise object. This may be native, or it may be polyfilled\n\n    var ES6Promise = require(\"./promise.js\");\n\n    /**\n     * thatLooksLikeAPromiseToMe()\n     *\n     * Duck-types a promise.\n     *\n     * @param {object} o\n     * @return {bool} True if this resembles a promise\n     */\n    function thatLooksLikeAPromiseToMe(o) {\n        return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n    }\n\n    /**\n     * promisify()\n     *\n     * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n     * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n     * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n     *\n     * @param {function} original - The function to promisify\n     * @param {object} settings - Settings object\n     * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n     * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n     * @return {function} A promisified version of `original`\n     */\n    return function promisify(original, settings) {\n\n        return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var returnMultipleArguments = settings && settings.multiArgs;\n\n            var target = void 0;\n            if (settings && settings.thisArg) {\n                target = settings.thisArg;\n            } else if (settings) {\n                target = settings;\n            }\n\n            // Return the promisified function\n            return new ES6Promise(function (resolve, reject) {\n\n                // Append the callback bound to the context\n                args.push(function callback(err) {\n\n                    if (err) {\n                        return reject(err);\n                    }\n\n                    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                        values[_key2 - 1] = arguments[_key2];\n                    }\n\n                    if (false === !!returnMultipleArguments) {\n                        return resolve(values[0]);\n                    }\n\n                    resolve(values);\n                });\n\n                // Call the function\n                var response = original.apply(target, args);\n\n                // If it looks like original already returns a promise,\n                // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n                if (thatLooksLikeAPromiseToMe(response)) {\n                    resolve(response);\n                }\n            });\n        };\n    };\n}();"],"mappings":"AAAA;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB,YAAY;EAEzB,aAFyB,CAIzB;;EAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;IAClC,OAAOA,CAAC,IAAI,OAAOA,CAAC,CAACC,IAAT,KAAkB,UAAvB,IAAqC,OAAOD,CAAC,CAACE,KAAT,KAAmB,UAA/D;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,QAA7B,EAAuC;IAE1C,OAAO,YAAY;MACf,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAD,CAAzC,EAAiDK,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGL,IAAvE,EAA6EK,IAAI,EAAjF,EAAqF;QACjFF,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;MACH;;MAED,IAAIC,uBAAuB,GAAGP,QAAQ,IAAIA,QAAQ,CAACQ,SAAnD;MAEA,IAAIC,MAAM,GAAG,KAAK,CAAlB;;MACA,IAAIT,QAAQ,IAAIA,QAAQ,CAACU,OAAzB,EAAkC;QAC9BD,MAAM,GAAGT,QAAQ,CAACU,OAAlB;MACH,CAFD,MAEO,IAAIV,QAAJ,EAAc;QACjBS,MAAM,GAAGT,QAAT;MACH,CAZc,CAcf;;;MACA,OAAO,IAAIR,UAAJ,CAAe,UAAUmB,OAAV,EAAmBC,MAAnB,EAA2B;QAE7C;QACAR,IAAI,CAACS,IAAL,CAAU,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;UAE7B,IAAIA,GAAJ,EAAS;YACL,OAAOH,MAAM,CAACG,GAAD,CAAb;UACH;;UAED,KAAK,IAAIC,KAAK,GAAGd,SAAS,CAACC,MAAtB,EAA8Bc,MAAM,GAAGZ,KAAK,CAACW,KAAK,GAAG,CAAR,GAAYA,KAAK,GAAG,CAApB,GAAwB,CAAzB,CAA5C,EAAyEE,KAAK,GAAG,CAAtF,EAAyFA,KAAK,GAAGF,KAAjG,EAAwGE,KAAK,EAA7G,EAAiH;YAC7GD,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,GAAoBhB,SAAS,CAACgB,KAAD,CAA7B;UACH;;UAED,IAAI,UAAU,CAAC,CAACX,uBAAhB,EAAyC;YACrC,OAAOI,OAAO,CAACM,MAAM,CAAC,CAAD,CAAP,CAAd;UACH;;UAEDN,OAAO,CAACM,MAAD,CAAP;QACH,CAfD,EAH6C,CAoB7C;;QACA,IAAIE,QAAQ,GAAGpB,QAAQ,CAACqB,KAAT,CAAeX,MAAf,EAAuBL,IAAvB,CAAf,CArB6C,CAuB7C;QACA;;QACA,IAAIV,yBAAyB,CAACyB,QAAD,CAA7B,EAAyC;UACrCR,OAAO,CAACQ,QAAD,CAAP;QACH;MACJ,CA5BM,CAAP;IA6BH,CA5CD;EA6CH,CA/CD;AAgDH,CAjFgB,EAAjB"},"metadata":{},"sourceType":"script"}