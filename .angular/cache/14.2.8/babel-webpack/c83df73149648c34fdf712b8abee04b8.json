{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Manages Firefox binaries. This module is considered internal;\n * users should use {@link ./firefox selenium-webdriver/firefox}.\n */\n'use strict';\n\nconst child = require('child_process'),\n      fs = require('fs'),\n      path = require('path'),\n      util = require('util');\n\nconst isDevMode = require('../lib/devmode'),\n      Symbols = require('../lib/symbols'),\n      io = require('../io'),\n      exec = require('../io/exec');\n/** @const */\n\n\nconst NO_FOCUS_LIB_X86 = isDevMode ? path.join(__dirname, '../../../../cpp/prebuilt/i386/libnoblur.so') : path.join(__dirname, '../lib/firefox/i386/libnoblur.so');\n/** @const */\n\nconst NO_FOCUS_LIB_AMD64 = isDevMode ? path.join(__dirname, '../../../../cpp/prebuilt/amd64/libnoblur64.so') : path.join(__dirname, '../lib/firefox/amd64/libnoblur64.so');\nconst X_IGNORE_NO_FOCUS_LIB = 'x_ignore_nofocus.so';\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\n\nfunction findInProgramFiles(file) {\n  let files = [process.env['PROGRAMFILES'] || 'C:\\\\Program Files', process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)'].map(prefix => path.join(prefix, file));\n  return io.exists(files[0]).then(function (exists) {\n    return exists ? files[0] : io.exists(files[1]).then(function (exists) {\n      return exists ? files[1] : null;\n    });\n  });\n}\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n *\n * @final\n */\n\n\nclass Channel {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  constructor(darwin, win32) {\n    /** @private @const */\n    this.darwin_ = darwin;\n    /** @private @const */\n\n    this.win32_ = win32;\n    /** @private {Promise<string>} */\n\n    this.found_ = null;\n  }\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n\n\n  locate() {\n    if (this.found_) {\n      return this.found_;\n    }\n\n    let found;\n\n    switch (process.platform) {\n      case 'darwin':\n        found = io.exists(this.darwin_).then(exists => exists ? this.darwin_ : io.findInPath('firefox'));\n        break;\n\n      case 'win32':\n        found = findInProgramFiles(this.win32_).then(found => found || io.findInPath('firefox.exe'));\n        break;\n\n      default:\n        found = Promise.resolve(io.findInPath('firefox'));\n        break;\n    }\n\n    this.found_ = found.then(found => {\n      if (found) {\n        // TODO: verify version info.\n        return found;\n      }\n\n      throw Error('Could not locate Firefox on the current system');\n    });\n    return this.found_;\n  }\n\n}\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>\n */\n\n\nChannel.AURORA = new Channel('/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin', 'Firefox Developer Edition\\\\firefox.exe');\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\n\nChannel.BETA = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox-bin', 'Mozilla Firefox\\\\firefox.exe');\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\n\nChannel.RELEASE = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox-bin', 'Mozilla Firefox\\\\firefox.exe');\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\n\nChannel.NIGHTLY = new Channel('/Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin', 'Nightly\\\\firefox.exe');\n/**\n * Copies the no focus libs into the given profile directory.\n * @param {string} profileDir Path to the profile directory to install into.\n * @return {!Promise<string>} The LD_LIBRARY_PATH prefix string to use\n *     for the installed libs.\n */\n\nfunction installNoFocusLibs(profileDir) {\n  var x86 = path.join(profileDir, 'x86');\n  var amd64 = path.join(profileDir, 'amd64');\n  return io.mkdir(x86).then(() => copyLib(NO_FOCUS_LIB_X86, x86)).then(() => io.mkdir(amd64)).then(() => copyLib(NO_FOCUS_LIB_AMD64, amd64)).then(function () {\n    return x86 + ':' + amd64;\n  });\n\n  function copyLib(src, dir) {\n    return io.copy(src, path.join(dir, X_IGNORE_NO_FOCUS_LIB));\n  }\n}\n/**\n * Provides a mechanism to configure and launch Firefox in a subprocess for\n * use with WebDriver.\n *\n * If created _without_ a path for the Firefox binary to use, this class will\n * attempt to find Firefox when {@link #launch()} is called. For MacOS and\n * Windows, this class will look for Firefox in the current platform's default\n * installation location (e.g. /Applications/Firefox.app on MacOS). For all\n * other platforms, the Firefox executable must be available on your system\n * `PATH`.\n *\n * @final\n * @deprecated This class will be removed in 4.0. Use the binary management\n *     functions available on the {@link ./index.Options firefox.Options} class.\n */\n\n\nclass Binary {\n  /**\n   * @param {?(string|Channel)=} opt_exeOrChannel Either the path to a specific\n   *     Firefox binary to use, or a {@link Channel} instance that describes\n   *     how to locate the desired Firefox version.\n   */\n  constructor(opt_exeOrChannel) {\n    /** @private {?(string|Channel)} */\n    this.exe_ = opt_exeOrChannel || null;\n    /** @private {!Array.<string>} */\n\n    this.args_ = [];\n    /** @private {!Object<string, string>} */\n\n    this.env_ = {};\n    Object.assign(this.env_, process.env, {\n      MOZ_CRASHREPORTER_DISABLE: '1',\n      MOZ_NO_REMOTE: '1',\n      NO_EM_RESTART: '1'\n    });\n    /** @private {boolean} */\n\n    this.devEdition_ = false;\n  }\n  /**\n   * @return {(string|undefined)} The path to the Firefox executable to use, or\n   *     `undefined` if WebDriver should attempt to locate Firefox automatically\n   *     on the current system.\n   */\n\n\n  getExe() {\n    return typeof this.exe_ === 'string' ? this.exe_ : undefined;\n  }\n  /**\n   * Add arguments to the command line used to start Firefox.\n   * @param {...(string|!Array.<string>)} var_args Either the arguments to add\n   *     as varargs, or the arguments as an array.\n   * @deprecated Use {@link ./index.Options#addArguments}.\n   */\n\n\n  addArguments(var_args) {\n    for (var i = 0; i < arguments.length; i++) {\n      if (Array.isArray(arguments[i])) {\n        this.args_ = this.args_.concat(arguments[i]);\n      } else {\n        this.args_.push(arguments[i]);\n      }\n    }\n  }\n  /**\n   * @return {!Array<string>} The command line arguments to use when starting\n   *     the browser.\n   */\n\n\n  getArguments() {\n    return this.args_;\n  }\n  /**\n   * Specifies whether to use Firefox Developer Edition instead of the normal\n   * stable channel. Setting this option has no effect if this instance was\n   * created with a path to a specific Firefox binary.\n   *\n   * This method has no effect on Unix systems where the Firefox application\n   * has the same (default) name regardless of version.\n   *\n   * @param {boolean=} opt_use Whether to use the developer edition. Defaults to\n   *     true.\n   * @deprecated Use the {@link Channel} class to indicate the desired Firefox\n   *     version when creating a new binary: `new Binary(Channel.AURORA)`.\n   */\n\n\n  useDevEdition(opt_use) {\n    this.devEdition_ = opt_use === undefined || !!opt_use;\n  }\n  /**\n   * Returns a promise for the Firefox executable used by this instance. The\n   * returned promise will be immediately resolved if the user supplied an\n   * executable path when this instance was created. Otherwise, an attempt will\n   * be made to find Firefox on the current system.\n   *\n   * @return {!Promise<string>} a promise for the path to the Firefox executable\n   *     used by this instance.\n   */\n\n\n  locate() {\n    if (typeof this.exe_ === 'string') {\n      return Promise.resolve(this.exe_);\n    } else if (this.exe_ instanceof Channel) {\n      return this.exe_.locate();\n    }\n\n    let channel = this.devEdition_ ? Channel.AURORA : Channel.RELEASE;\n    return channel.locate();\n  }\n  /**\n   * Launches Firefox and returns a promise that will be fulfilled when the\n   * process terminates.\n   * @param {string} profile Path to the profile directory to use.\n   * @return {!Promise<!exec.Command>} A promise for the handle to the started\n   *     subprocess.\n   */\n\n\n  launch(profile) {\n    let env = {};\n    Object.assign(env, this.env_, {\n      XRE_PROFILE_PATH: profile\n    });\n    let args = ['-foreground'].concat(this.args_);\n    return this.locate().then(function (firefox) {\n      if (process.platform === 'win32' || process.platform === 'darwin') {\n        return exec(firefox, {\n          args: args,\n          env: env\n        });\n      }\n\n      return installNoFocusLibs(profile).then(function (ldLibraryPath) {\n        env['LD_LIBRARY_PATH'] = ldLibraryPath + ':' + env['LD_LIBRARY_PATH'];\n        env['LD_PRELOAD'] = X_IGNORE_NO_FOCUS_LIB;\n        return exec(firefox, {\n          args: args,\n          env: env\n        });\n      });\n    });\n  }\n  /**\n   * Returns a promise for the wire representation of this binary. Note: the\n   * FirefoxDriver only supports passing the path to the binary executable over\n   * the wire; all command line arguments and environment variables will be\n   * discarded.\n   *\n   * @return {!Promise<string>} A promise for this binary's wire representation.\n   */\n\n\n  [Symbols.serialize]() {\n    return this.locate();\n  }\n\n} // PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;","map":{"version":3,"names":["child","require","fs","path","util","isDevMode","Symbols","io","exec","NO_FOCUS_LIB_X86","join","__dirname","NO_FOCUS_LIB_AMD64","X_IGNORE_NO_FOCUS_LIB","findInProgramFiles","file","files","process","env","map","prefix","exists","then","Channel","constructor","darwin","win32","darwin_","win32_","found_","locate","found","platform","findInPath","Promise","resolve","Error","AURORA","BETA","RELEASE","NIGHTLY","installNoFocusLibs","profileDir","x86","amd64","mkdir","copyLib","src","dir","copy","Binary","opt_exeOrChannel","exe_","args_","env_","Object","assign","MOZ_CRASHREPORTER_DISABLE","MOZ_NO_REMOTE","NO_EM_RESTART","devEdition_","getExe","undefined","addArguments","var_args","i","arguments","length","Array","isArray","concat","push","getArguments","useDevEdition","opt_use","channel","launch","profile","XRE_PROFILE_PATH","args","firefox","ldLibraryPath","serialize","exports"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/selenium-webdriver/firefox/binary.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Manages Firefox binaries. This module is considered internal;\n * users should use {@link ./firefox selenium-webdriver/firefox}.\n */\n\n'use strict';\n\nconst child = require('child_process'),\n    fs = require('fs'),\n    path = require('path'),\n    util = require('util');\n\nconst isDevMode = require('../lib/devmode'),\n    Symbols = require('../lib/symbols'),\n    io = require('../io'),\n    exec = require('../io/exec');\n\n\n\n/** @const */\nconst NO_FOCUS_LIB_X86 = isDevMode ?\n    path.join(__dirname, '../../../../cpp/prebuilt/i386/libnoblur.so') :\n    path.join(__dirname, '../lib/firefox/i386/libnoblur.so') ;\n\n/** @const */\nconst NO_FOCUS_LIB_AMD64 = isDevMode ?\n    path.join(__dirname, '../../../../cpp/prebuilt/amd64/libnoblur64.so') :\n    path.join(__dirname, '../lib/firefox/amd64/libnoblur64.so') ;\n\nconst X_IGNORE_NO_FOCUS_LIB = 'x_ignore_nofocus.so';\n\n\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\nfunction findInProgramFiles(file) {\n  let files = [\n    process.env['PROGRAMFILES'] || 'C:\\\\Program Files',\n    process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)'\n  ].map(prefix => path.join(prefix, file));\n  return io.exists(files[0]).then(function(exists) {\n    return exists ? files[0] : io.exists(files[1]).then(function(exists) {\n      return exists ? files[1] : null;\n    });\n  });\n}\n\n\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n *\n * @final\n */\nclass Channel {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  constructor(darwin, win32) {\n    /** @private @const */ this.darwin_ = darwin;\n    /** @private @const */ this.win32_ = win32;\n    /** @private {Promise<string>} */\n    this.found_ = null;\n  }\n\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n  locate() {\n    if (this.found_) {\n      return this.found_;\n    }\n\n    let found;\n    switch (process.platform) {\n      case 'darwin':\n        found = io.exists(this.darwin_)\n            .then(exists => exists ? this.darwin_ : io.findInPath('firefox'));\n        break;\n\n      case 'win32':\n        found = findInProgramFiles(this.win32_)\n            .then(found => found || io.findInPath('firefox.exe'));\n        break;\n\n      default:\n        found = Promise.resolve(io.findInPath('firefox'));\n        break;\n    }\n\n    this.found_ = found.then(found => {\n      if (found) {\n        // TODO: verify version info.\n        return found;\n      }\n      throw Error('Could not locate Firefox on the current system');\n    });\n    return this.found_;\n  }\n}\n\n\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>\n */\nChannel.AURORA = new Channel(\n  '/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin',\n  'Firefox Developer Edition\\\\firefox.exe');\n\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\nChannel.BETA = new Channel(\n  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',\n  'Mozilla Firefox\\\\firefox.exe');\n\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\nChannel.RELEASE = new Channel(\n  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',\n  'Mozilla Firefox\\\\firefox.exe');\n\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\nChannel.NIGHTLY = new Channel(\n  '/Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin',\n  'Nightly\\\\firefox.exe');\n\n\n/**\n * Copies the no focus libs into the given profile directory.\n * @param {string} profileDir Path to the profile directory to install into.\n * @return {!Promise<string>} The LD_LIBRARY_PATH prefix string to use\n *     for the installed libs.\n */\nfunction installNoFocusLibs(profileDir) {\n  var x86 = path.join(profileDir, 'x86');\n  var amd64 = path.join(profileDir, 'amd64');\n\n  return io.mkdir(x86)\n      .then(() => copyLib(NO_FOCUS_LIB_X86, x86))\n      .then(() => io.mkdir(amd64))\n      .then(() => copyLib(NO_FOCUS_LIB_AMD64, amd64))\n      .then(function() {\n        return x86 + ':' + amd64;\n      });\n\n  function copyLib(src, dir) {\n    return io.copy(src, path.join(dir, X_IGNORE_NO_FOCUS_LIB));\n  }\n}\n\n\n/**\n * Provides a mechanism to configure and launch Firefox in a subprocess for\n * use with WebDriver.\n *\n * If created _without_ a path for the Firefox binary to use, this class will\n * attempt to find Firefox when {@link #launch()} is called. For MacOS and\n * Windows, this class will look for Firefox in the current platform's default\n * installation location (e.g. /Applications/Firefox.app on MacOS). For all\n * other platforms, the Firefox executable must be available on your system\n * `PATH`.\n *\n * @final\n * @deprecated This class will be removed in 4.0. Use the binary management\n *     functions available on the {@link ./index.Options firefox.Options} class.\n */\nclass Binary {\n  /**\n   * @param {?(string|Channel)=} opt_exeOrChannel Either the path to a specific\n   *     Firefox binary to use, or a {@link Channel} instance that describes\n   *     how to locate the desired Firefox version.\n   */\n  constructor(opt_exeOrChannel) {\n    /** @private {?(string|Channel)} */\n    this.exe_ = opt_exeOrChannel || null;\n\n    /** @private {!Array.<string>} */\n    this.args_ = [];\n\n    /** @private {!Object<string, string>} */\n    this.env_ = {};\n    Object.assign(this.env_, process.env, {\n      MOZ_CRASHREPORTER_DISABLE: '1',\n      MOZ_NO_REMOTE: '1',\n      NO_EM_RESTART: '1'\n    });\n\n    /** @private {boolean} */\n    this.devEdition_ = false;\n  }\n\n  /**\n   * @return {(string|undefined)} The path to the Firefox executable to use, or\n   *     `undefined` if WebDriver should attempt to locate Firefox automatically\n   *     on the current system.\n   */\n  getExe() {\n    return typeof this.exe_ === 'string' ? this.exe_ : undefined;\n  }\n\n  /**\n   * Add arguments to the command line used to start Firefox.\n   * @param {...(string|!Array.<string>)} var_args Either the arguments to add\n   *     as varargs, or the arguments as an array.\n   * @deprecated Use {@link ./index.Options#addArguments}.\n   */\n  addArguments(var_args) {\n    for (var i = 0; i < arguments.length; i++) {\n      if (Array.isArray(arguments[i])) {\n        this.args_ = this.args_.concat(arguments[i]);\n      } else {\n        this.args_.push(arguments[i]);\n      }\n    }\n  }\n\n  /**\n   * @return {!Array<string>} The command line arguments to use when starting\n   *     the browser.\n   */\n  getArguments() {\n    return this.args_;\n  }\n\n  /**\n   * Specifies whether to use Firefox Developer Edition instead of the normal\n   * stable channel. Setting this option has no effect if this instance was\n   * created with a path to a specific Firefox binary.\n   *\n   * This method has no effect on Unix systems where the Firefox application\n   * has the same (default) name regardless of version.\n   *\n   * @param {boolean=} opt_use Whether to use the developer edition. Defaults to\n   *     true.\n   * @deprecated Use the {@link Channel} class to indicate the desired Firefox\n   *     version when creating a new binary: `new Binary(Channel.AURORA)`.\n   */\n  useDevEdition(opt_use) {\n    this.devEdition_ = opt_use === undefined || !!opt_use;\n  }\n\n  /**\n   * Returns a promise for the Firefox executable used by this instance. The\n   * returned promise will be immediately resolved if the user supplied an\n   * executable path when this instance was created. Otherwise, an attempt will\n   * be made to find Firefox on the current system.\n   *\n   * @return {!Promise<string>} a promise for the path to the Firefox executable\n   *     used by this instance.\n   */\n  locate() {\n    if (typeof this.exe_ === 'string') {\n      return Promise.resolve(this.exe_);\n    } else if (this.exe_ instanceof Channel) {\n      return this.exe_.locate();\n    }\n    let channel = this.devEdition_ ? Channel.AURORA : Channel.RELEASE;\n    return channel.locate();\n  }\n\n  /**\n   * Launches Firefox and returns a promise that will be fulfilled when the\n   * process terminates.\n   * @param {string} profile Path to the profile directory to use.\n   * @return {!Promise<!exec.Command>} A promise for the handle to the started\n   *     subprocess.\n   */\n  launch(profile) {\n    let env = {};\n    Object.assign(env, this.env_, {XRE_PROFILE_PATH: profile});\n\n    let args = ['-foreground'].concat(this.args_);\n\n    return this.locate().then(function(firefox) {\n      if (process.platform === 'win32' || process.platform === 'darwin') {\n        return exec(firefox, {args: args, env: env});\n      }\n      return installNoFocusLibs(profile).then(function(ldLibraryPath) {\n        env['LD_LIBRARY_PATH'] = ldLibraryPath + ':' + env['LD_LIBRARY_PATH'];\n        env['LD_PRELOAD'] = X_IGNORE_NO_FOCUS_LIB;\n        return exec(firefox, {args: args, env: env});\n      });\n    });\n  }\n\n  /**\n   * Returns a promise for the wire representation of this binary. Note: the\n   * FirefoxDriver only supports passing the path to the binary executable over\n   * the wire; all command line arguments and environment variables will be\n   * discarded.\n   *\n   * @return {!Promise<string>} A promise for this binary's wire representation.\n   */\n  [Symbols.serialize]() {\n    return this.locate();\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}