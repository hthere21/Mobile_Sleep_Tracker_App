{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst http = require(\"http\");\n\nconst url = require(\"url\");\n\nconst webdriver_commands_1 = require(\"./webdriver_commands\");\n/**\n * A proxy that understands WebDriver commands. Users can add barriers (similar to middleware in\n * express) that will be called before forwarding the request to WebDriver. The proxy will wait for\n * each barrier to finish, calling them in the order in which they were added.\n */\n\n\nclass WebDriverProxy {\n  constructor(seleniumAddress) {\n    this.barriers = [];\n    this.seleniumAddress = seleniumAddress;\n  }\n\n  addBarrier(barrier) {\n    this.barriers.push(barrier);\n  }\n\n  handleRequest(originalRequest, response) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let command = webdriver_commands_1.parseWebDriverCommand(originalRequest.url, originalRequest.method);\n\n      let replyWithError = err => {\n        response.writeHead(502);\n\n        if (err && err.toString) {\n          response.write(err.toString());\n        }\n\n        response.end();\n      }; // Process barriers in order, one at a time.\n\n\n      try {\n        for (let barrier of this.barriers) {\n          yield barrier.onCommand(command);\n        }\n      } catch (err) {\n        replyWithError(err); // Don't call through if a barrier fails.\n\n        return;\n      }\n\n      let parsedUrl = url.parse(this.seleniumAddress);\n      let options = {};\n      options.method = originalRequest.method;\n      options.path = parsedUrl.path + originalRequest.url;\n      options.hostname = parsedUrl.hostname;\n      options.port = parseInt(parsedUrl.port);\n      options.headers = originalRequest.headers;\n      let forwardedRequest = http.request(options); // clang-format off\n\n      let reqData = '';\n      originalRequest.on('data', d => {\n        reqData += d;\n        forwardedRequest.write(d);\n      }).on('end', () => {\n        command.handleData(reqData);\n        forwardedRequest.end();\n      }).on('error', replyWithError);\n      forwardedRequest.on('response', seleniumResponse => {\n        response.writeHead(seleniumResponse.statusCode, seleniumResponse.headers);\n        let respData = '';\n        seleniumResponse.on('data', d => {\n          respData += d;\n          response.write(d);\n        }).on('end', () => {\n          command.handleResponse(seleniumResponse.statusCode, respData);\n          response.end();\n        }).on('error', replyWithError);\n      }).on('error', replyWithError); // clang-format on\n    });\n  }\n\n}\n\nexports.WebDriverProxy = WebDriverProxy;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","http","require","url","webdriver_commands_1","WebDriverProxy","constructor","seleniumAddress","barriers","addBarrier","barrier","push","handleRequest","originalRequest","response","command","parseWebDriverCommand","method","replyWithError","err","writeHead","toString","write","end","onCommand","parsedUrl","parse","options","path","hostname","port","parseInt","headers","forwardedRequest","request","reqData","on","d","handleData","seleniumResponse","statusCode","respData","handleResponse"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/blocking-proxy/built/lib/webdriver_proxy.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst webdriver_commands_1 = require(\"./webdriver_commands\");\n/**\n * A proxy that understands WebDriver commands. Users can add barriers (similar to middleware in\n * express) that will be called before forwarding the request to WebDriver. The proxy will wait for\n * each barrier to finish, calling them in the order in which they were added.\n */\nclass WebDriverProxy {\n    constructor(seleniumAddress) {\n        this.barriers = [];\n        this.seleniumAddress = seleniumAddress;\n    }\n    addBarrier(barrier) {\n        this.barriers.push(barrier);\n    }\n    handleRequest(originalRequest, response) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let command = webdriver_commands_1.parseWebDriverCommand(originalRequest.url, originalRequest.method);\n            let replyWithError = (err) => {\n                response.writeHead(502);\n                if (err && err.toString) {\n                    response.write(err.toString());\n                }\n                response.end();\n            };\n            // Process barriers in order, one at a time.\n            try {\n                for (let barrier of this.barriers) {\n                    yield barrier.onCommand(command);\n                }\n            }\n            catch (err) {\n                replyWithError(err);\n                // Don't call through if a barrier fails.\n                return;\n            }\n            let parsedUrl = url.parse(this.seleniumAddress);\n            let options = {};\n            options.method = originalRequest.method;\n            options.path = parsedUrl.path + originalRequest.url;\n            options.hostname = parsedUrl.hostname;\n            options.port = parseInt(parsedUrl.port);\n            options.headers = originalRequest.headers;\n            let forwardedRequest = http.request(options);\n            // clang-format off\n            let reqData = '';\n            originalRequest.on('data', (d) => {\n                reqData += d;\n                forwardedRequest.write(d);\n            }).on('end', () => {\n                command.handleData(reqData);\n                forwardedRequest.end();\n            }).on('error', replyWithError);\n            forwardedRequest.on('response', (seleniumResponse) => {\n                response.writeHead(seleniumResponse.statusCode, seleniumResponse.headers);\n                let respData = '';\n                seleniumResponse.on('data', (d) => {\n                    respData += d;\n                    response.write(d);\n                }).on('end', () => {\n                    command.handleResponse(seleniumResponse.statusCode, respData);\n                    response.end();\n                }).on('error', replyWithError);\n            }).on('error', replyWithError);\n            // clang-format on\n        });\n    }\n}\nexports.WebDriverProxy = WebDriverProxy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}