{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *  This is a base driver provider class.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nconst q = require(\"q\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst bpRunner_1 = require(\"../bpRunner\");\n\nclass DriverProvider {\n  constructor(config) {\n    this.config_ = config;\n    this.drivers_ = [];\n    this.bpRunner = new bpRunner_1.BlockingProxyRunner(config);\n  }\n  /**\n   * Get all existing drivers.\n   *\n   * @public\n   * @return array of webdriver instances\n   */\n\n\n  getExistingDrivers() {\n    return this.drivers_.slice(); // Create a shallow copy\n  }\n\n  getBPUrl() {\n    if (this.config_.blockingProxyUrl) {\n      return this.config_.blockingProxyUrl;\n    }\n\n    return `http://localhost:${this.bpRunner.port}`;\n  }\n  /**\n   * Create a new driver.\n   *\n   * @public\n   * @return webdriver instance\n   */\n\n\n  getNewDriver() {\n    let builder;\n\n    if (this.config_.useBlockingProxy) {\n      builder = new selenium_webdriver_1.Builder().usingServer(this.getBPUrl()).withCapabilities(this.config_.capabilities);\n    } else {\n      builder = new selenium_webdriver_1.Builder().usingServer(this.config_.seleniumAddress).usingWebDriverProxy(this.config_.webDriverProxy).withCapabilities(this.config_.capabilities);\n    }\n\n    if (this.config_.disableEnvironmentOverrides === true) {\n      builder.disableEnvironmentOverrides();\n    }\n\n    let newDriver = builder.build();\n    this.drivers_.push(newDriver);\n    return newDriver;\n  }\n  /**\n   * Quit a driver.\n   *\n   * @public\n   * @param webdriver instance\n   */\n\n\n  quitDriver(driver) {\n    let driverIndex = this.drivers_.indexOf(driver);\n\n    if (driverIndex >= 0) {\n      this.drivers_.splice(driverIndex, 1);\n    }\n\n    if (driver.getSession() === undefined) {\n      return selenium_webdriver_1.promise.when(undefined);\n    } else {\n      return driver.getSession().then(session_ => {\n        if (session_) {\n          return driver.quit();\n        }\n      }).catch(function (err) {});\n    }\n  }\n  /**\n   * Quits an array of drivers and returns a q promise instead of a webdriver one\n   *\n   * @param drivers {webdriver.WebDriver[]} The webdriver instances\n   */\n\n\n  static quitDrivers(provider, drivers) {\n    let deferred = q.defer();\n    selenium_webdriver_1.promise.all(drivers.map(driver => {\n      return provider.quitDriver(driver);\n    })).then(() => {\n      deferred.resolve();\n    }, () => {\n      deferred.resolve();\n    });\n    return deferred.promise;\n  }\n  /**\n   * Default update job method.\n   * @return a promise\n   */\n\n\n  updateJob(update) {\n    return q.fcall(function () {});\n  }\n\n  /**\n   * Default setup environment method, common to all driver providers.\n   */\n  setupEnv() {\n    let driverPromise = this.setupDriverEnv();\n\n    if (this.config_.useBlockingProxy && !this.config_.blockingProxyUrl) {\n      // TODO(heathkit): If set, pass the webDriverProxy to BP.\n      return driverPromise.then(() => this.bpRunner.start());\n    }\n\n    return driverPromise;\n  }\n\n  /**\n   * Teardown and destroy the environment and do any associated cleanup.\n   * Shuts down the drivers.\n   *\n   * @public\n   * @return {q.Promise<any>} A promise which will resolve when the environment is down.\n   */\n  teardownEnv() {\n    return DriverProvider.quitDrivers(this, this.drivers_);\n  }\n\n}\n\nexports.DriverProvider = DriverProvider;","map":{"version":3,"names":["Object","defineProperty","exports","value","q","require","selenium_webdriver_1","bpRunner_1","DriverProvider","constructor","config","config_","drivers_","bpRunner","BlockingProxyRunner","getExistingDrivers","slice","getBPUrl","blockingProxyUrl","port","getNewDriver","builder","useBlockingProxy","Builder","usingServer","withCapabilities","capabilities","seleniumAddress","usingWebDriverProxy","webDriverProxy","disableEnvironmentOverrides","newDriver","build","push","quitDriver","driver","driverIndex","indexOf","splice","getSession","undefined","promise","when","then","session_","quit","catch","err","quitDrivers","provider","drivers","deferred","defer","all","map","resolve","updateJob","update","fcall","setupEnv","driverPromise","setupDriverEnv","start","teardownEnv"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/driverProvider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *  This is a base driver provider class.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst bpRunner_1 = require(\"../bpRunner\");\nclass DriverProvider {\n    constructor(config) {\n        this.config_ = config;\n        this.drivers_ = [];\n        this.bpRunner = new bpRunner_1.BlockingProxyRunner(config);\n    }\n    /**\n     * Get all existing drivers.\n     *\n     * @public\n     * @return array of webdriver instances\n     */\n    getExistingDrivers() {\n        return this.drivers_.slice(); // Create a shallow copy\n    }\n    getBPUrl() {\n        if (this.config_.blockingProxyUrl) {\n            return this.config_.blockingProxyUrl;\n        }\n        return `http://localhost:${this.bpRunner.port}`;\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @return webdriver instance\n     */\n    getNewDriver() {\n        let builder;\n        if (this.config_.useBlockingProxy) {\n            builder =\n                new selenium_webdriver_1.Builder().usingServer(this.getBPUrl()).withCapabilities(this.config_.capabilities);\n        }\n        else {\n            builder = new selenium_webdriver_1.Builder()\n                .usingServer(this.config_.seleniumAddress)\n                .usingWebDriverProxy(this.config_.webDriverProxy)\n                .withCapabilities(this.config_.capabilities);\n        }\n        if (this.config_.disableEnvironmentOverrides === true) {\n            builder.disableEnvironmentOverrides();\n        }\n        let newDriver = builder.build();\n        this.drivers_.push(newDriver);\n        return newDriver;\n    }\n    /**\n     * Quit a driver.\n     *\n     * @public\n     * @param webdriver instance\n     */\n    quitDriver(driver) {\n        let driverIndex = this.drivers_.indexOf(driver);\n        if (driverIndex >= 0) {\n            this.drivers_.splice(driverIndex, 1);\n        }\n        if (driver.getSession() === undefined) {\n            return selenium_webdriver_1.promise.when(undefined);\n        }\n        else {\n            return driver.getSession()\n                .then((session_) => {\n                if (session_) {\n                    return driver.quit();\n                }\n            })\n                .catch(function (err) { });\n        }\n    }\n    /**\n     * Quits an array of drivers and returns a q promise instead of a webdriver one\n     *\n     * @param drivers {webdriver.WebDriver[]} The webdriver instances\n     */\n    static quitDrivers(provider, drivers) {\n        let deferred = q.defer();\n        selenium_webdriver_1.promise\n            .all(drivers.map((driver) => {\n            return provider.quitDriver(driver);\n        }))\n            .then(() => {\n            deferred.resolve();\n        }, () => {\n            deferred.resolve();\n        });\n        return deferred.promise;\n    }\n    /**\n     * Default update job method.\n     * @return a promise\n     */\n    updateJob(update) {\n        return q.fcall(function () { });\n    }\n    ;\n    /**\n     * Default setup environment method, common to all driver providers.\n     */\n    setupEnv() {\n        let driverPromise = this.setupDriverEnv();\n        if (this.config_.useBlockingProxy && !this.config_.blockingProxyUrl) {\n            // TODO(heathkit): If set, pass the webDriverProxy to BP.\n            return driverPromise.then(() => this.bpRunner.start());\n        }\n        return driverPromise;\n    }\n    ;\n    /**\n     * Teardown and destroy the environment and do any associated cleanup.\n     * Shuts down the drivers.\n     *\n     * @public\n     * @return {q.Promise<any>} A promise which will resolve when the environment is down.\n     */\n    teardownEnv() {\n        return DriverProvider.quitDrivers(this, this.drivers_);\n    }\n}\nexports.DriverProvider = DriverProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}