{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst options_1 = require(\"./options\");\n/**\n * A program has a command, a description, options, and a run method\n */\n\n\nclass Program {\n  constructor() {\n    this.options = {};\n  }\n  /**\n   * Register a command and the description.\n   * @param cmd The command.\n   * @param cmdDescription The description of the command.\n   * @returns The program for method chaining.\n   */\n\n\n  command(cmd, cmdDescription) {\n    this.cmd = cmd;\n    this.cmdDescription = cmdDescription;\n    return this;\n  }\n  /**\n   * Register a new option.\n   * @param opt The option.\n   * @param description The description of the option.\n   * @param type The type of value expected: boolean, number, or string\n   * @param defaultValue The option's default value.\n   * @returns The program for method chaining.\n   */\n\n\n  option(opt, description, type, opt_defaultValue) {\n    this.options[opt] = new options_1.Option(opt, description, type, opt_defaultValue);\n    return this;\n  }\n  /**\n   * Adds an option to the program.\n   * @param option The option.\n   * @returns The program for method chaining.\n   */\n\n\n  addOption(option) {\n    this.options[option.opt] = option;\n    return this;\n  }\n  /**\n   * Registers a method that will be used to run the program.\n   * @param runMethod The method that will be used to run the program.\n   * @returns The program for method chaining.\n   */\n\n\n  action(runMethod) {\n    this.runMethod = runMethod;\n    return this;\n  }\n  /**\n   * Adds the value to the options and passes the updated options to the run\n   * method.\n   * @param args The arguments that will be parsed to run the method.\n   */\n\n\n  run(json) {\n    for (let opt in this.options) {\n      this.options[opt].value = this.getValue_(opt, json);\n    }\n\n    return Promise.resolve(this.runMethod(this.options));\n  }\n\n  getValue_(key, json) {\n    let keyList = key.split('.');\n    let tempJson = json;\n\n    while (keyList.length > 0) {\n      let keyItem = keyList[0];\n\n      if (tempJson[keyItem] != null) {\n        tempJson = tempJson[keyItem];\n        keyList = keyList.slice(1);\n      } else {\n        return undefined;\n      }\n    }\n\n    return tempJson;\n  }\n  /**\n   * Prints the command with the description. The description will have spaces\n   * between the cmd so that the starting position is \"posDescription\". If the\n   * gap between the cmd and the description is less than MIN_SPACING or\n   * posDescription is undefined, the spacing will be MIN_SPACING.\n   *\n   * @param opt_postDescription Starting position of the description.\n   */\n\n\n  printCmd(opt_posDescription) {\n    let log = '  ' + this.cmd;\n    let spacing = Program.MIN_SPACING;\n\n    if (opt_posDescription) {\n      let diff = opt_posDescription - log.length;\n\n      if (diff < Program.MIN_SPACING) {\n        spacing = Program.MIN_SPACING;\n      } else {\n        spacing = diff;\n      }\n    }\n\n    log += Array(spacing).join(' ') + this.cmdDescription;\n    console.log(log);\n  }\n  /**\n   * Prints the options with the option descriptions and default values.\n   * The posDescription and posDefault is the starting position for the option\n   * description. If extOptions are provided, check to see if we have already\n   * printed those options. Also, once we print the option, add them to the extOptions.\n   *\n   * @param posDescription Position to start logging the description.\n   * @param posDefault Position to start logging the default value.\n   * @param opt_extOptions A collection of options that will be updated.\n   */\n\n\n  printOptions(posDescription, posDefault, opt_extOptions) {\n    for (let opt in this.options) {\n      // we have already logged it\n      if (opt_extOptions && opt_extOptions[opt]) {\n        continue;\n      }\n\n      let option = this.options[opt];\n      let log = '  --' + option.opt;\n      let spacing = Program.MIN_SPACING; // description\n\n      let diff = posDescription - log.length;\n\n      if (diff < Program.MIN_SPACING) {\n        spacing = Program.MIN_SPACING;\n      } else {\n        spacing = diff;\n      }\n\n      log += Array(spacing).join(' ') + option.description; // default value\n\n      if (option.defaultValue) {\n        spacing = Program.MIN_SPACING;\n        let diff = posDefault - log.length - 1;\n\n        if (diff <= Program.MIN_SPACING) {\n          spacing = Program.MIN_SPACING;\n        } else {\n          spacing = diff;\n        }\n\n        log += Array(spacing).join(' ');\n        log += '[default: ' + option.defaultValue + ']';\n      }\n\n      console.log(log);\n\n      if (opt_extOptions) {\n        opt_extOptions[option.opt] = option;\n      }\n    }\n  }\n  /**\n   * Assuming that the this program can run by itself, to print out the program's\n   * help. Also assuming that the commands are called cmd-run and cmd-help.\n   */\n\n\n  printHelp() {\n    console.log('\\n' + 'Usage:        ' + this.cmd + ' [options]\\n' + '              ' + this.cmd + ' help\\n' + 'Description:  ' + this.cmdDescription + '\\n');\n    console.log('Options:');\n    this.printOptions(this.posDescription(), this.posDefault());\n  }\n\n  posDescription() {\n    return this.lengthOf_('opt') + 2 * Program.MIN_SPACING;\n  }\n\n  posDefault() {\n    return this.posDescription() + this.lengthOf_('description') + Program.MIN_SPACING;\n  }\n\n  lengthOf_(param) {\n    let maxLength = -1;\n\n    for (let opt in this.options) {\n      let option = this.options[opt];\n\n      if (param === 'description') {\n        maxLength = Math.max(maxLength, option.description.length);\n      } else if (param === 'opt') {\n        maxLength = Math.max(maxLength, option.opt.length);\n      }\n    }\n\n    return maxLength;\n  }\n  /**\n   * Create a collection of options used by this program.\n   * @returns The options used in the programs.\n   */\n\n\n  getOptions_(allOptions) {\n    for (let opt in this.options) {\n      allOptions[opt] = this.options[opt];\n    }\n\n    return allOptions;\n  }\n  /**\n   * Get the options used by the program and create the minimist options\n   * to ensure that minimist parses the values properly.\n   * @returns The options for minimist.\n   */\n\n\n  getMinimistOptions() {\n    let allOptions = {};\n    allOptions = this.getOptions_(allOptions);\n    let minimistOptions = {};\n    let minimistBoolean = [];\n    let minimistString = [];\n    let minimistNumber = [];\n    let minimistDefault = {};\n\n    for (let opt in allOptions) {\n      let option = allOptions[opt];\n\n      if (option.type === 'boolean') {\n        minimistBoolean.push(option.opt);\n      } else if (option.type === 'string') {\n        minimistString.push(option.opt);\n      } else if (option.type === 'number') {\n        minimistNumber.push(option.opt);\n      }\n\n      if (typeof option.defaultValue !== 'undefined') {\n        minimistDefault[option.opt] = option.defaultValue;\n      }\n    }\n\n    minimistOptions['boolean'] = minimistBoolean;\n    minimistOptions['string'] = minimistString;\n    minimistOptions['number'] = minimistNumber;\n    minimistOptions['default'] = minimistDefault;\n    return minimistOptions;\n  }\n\n}\n\nProgram.MIN_SPACING = 4;\nexports.Program = Program;","map":{"version":3,"names":["Object","defineProperty","exports","value","options_1","require","Program","constructor","options","command","cmd","cmdDescription","option","opt","description","type","opt_defaultValue","Option","addOption","action","runMethod","run","json","getValue_","Promise","resolve","key","keyList","split","tempJson","length","keyItem","slice","undefined","printCmd","opt_posDescription","log","spacing","MIN_SPACING","diff","Array","join","console","printOptions","posDescription","posDefault","opt_extOptions","defaultValue","printHelp","lengthOf_","param","maxLength","Math","max","getOptions_","allOptions","getMinimistOptions","minimistOptions","minimistBoolean","minimistString","minimistNumber","minimistDefault","push"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/webdriver-manager/built/lib/cli/programs.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst options_1 = require(\"./options\");\n/**\n * A program has a command, a description, options, and a run method\n */\nclass Program {\n    constructor() {\n        this.options = {};\n    }\n    /**\n     * Register a command and the description.\n     * @param cmd The command.\n     * @param cmdDescription The description of the command.\n     * @returns The program for method chaining.\n     */\n    command(cmd, cmdDescription) {\n        this.cmd = cmd;\n        this.cmdDescription = cmdDescription;\n        return this;\n    }\n    /**\n     * Register a new option.\n     * @param opt The option.\n     * @param description The description of the option.\n     * @param type The type of value expected: boolean, number, or string\n     * @param defaultValue The option's default value.\n     * @returns The program for method chaining.\n     */\n    option(opt, description, type, opt_defaultValue) {\n        this.options[opt] = new options_1.Option(opt, description, type, opt_defaultValue);\n        return this;\n    }\n    /**\n     * Adds an option to the program.\n     * @param option The option.\n     * @returns The program for method chaining.\n     */\n    addOption(option) {\n        this.options[option.opt] = option;\n        return this;\n    }\n    /**\n     * Registers a method that will be used to run the program.\n     * @param runMethod The method that will be used to run the program.\n     * @returns The program for method chaining.\n     */\n    action(runMethod) {\n        this.runMethod = runMethod;\n        return this;\n    }\n    /**\n     * Adds the value to the options and passes the updated options to the run\n     * method.\n     * @param args The arguments that will be parsed to run the method.\n     */\n    run(json) {\n        for (let opt in this.options) {\n            this.options[opt].value = this.getValue_(opt, json);\n        }\n        return Promise.resolve(this.runMethod(this.options));\n    }\n    getValue_(key, json) {\n        let keyList = key.split('.');\n        let tempJson = json;\n        while (keyList.length > 0) {\n            let keyItem = keyList[0];\n            if (tempJson[keyItem] != null) {\n                tempJson = tempJson[keyItem];\n                keyList = keyList.slice(1);\n            }\n            else {\n                return undefined;\n            }\n        }\n        return tempJson;\n    }\n    /**\n     * Prints the command with the description. The description will have spaces\n     * between the cmd so that the starting position is \"posDescription\". If the\n     * gap between the cmd and the description is less than MIN_SPACING or\n     * posDescription is undefined, the spacing will be MIN_SPACING.\n     *\n     * @param opt_postDescription Starting position of the description.\n     */\n    printCmd(opt_posDescription) {\n        let log = '  ' + this.cmd;\n        let spacing = Program.MIN_SPACING;\n        if (opt_posDescription) {\n            let diff = opt_posDescription - log.length;\n            if (diff < Program.MIN_SPACING) {\n                spacing = Program.MIN_SPACING;\n            }\n            else {\n                spacing = diff;\n            }\n        }\n        log += Array(spacing).join(' ') + this.cmdDescription;\n        console.log(log);\n    }\n    /**\n     * Prints the options with the option descriptions and default values.\n     * The posDescription and posDefault is the starting position for the option\n     * description. If extOptions are provided, check to see if we have already\n     * printed those options. Also, once we print the option, add them to the extOptions.\n     *\n     * @param posDescription Position to start logging the description.\n     * @param posDefault Position to start logging the default value.\n     * @param opt_extOptions A collection of options that will be updated.\n     */\n    printOptions(posDescription, posDefault, opt_extOptions) {\n        for (let opt in this.options) {\n            // we have already logged it\n            if (opt_extOptions && opt_extOptions[opt]) {\n                continue;\n            }\n            let option = this.options[opt];\n            let log = '  --' + option.opt;\n            let spacing = Program.MIN_SPACING;\n            // description\n            let diff = posDescription - log.length;\n            if (diff < Program.MIN_SPACING) {\n                spacing = Program.MIN_SPACING;\n            }\n            else {\n                spacing = diff;\n            }\n            log += Array(spacing).join(' ') + option.description;\n            // default value\n            if (option.defaultValue) {\n                spacing = Program.MIN_SPACING;\n                let diff = posDefault - log.length - 1;\n                if (diff <= Program.MIN_SPACING) {\n                    spacing = Program.MIN_SPACING;\n                }\n                else {\n                    spacing = diff;\n                }\n                log += Array(spacing).join(' ');\n                log += '[default: ' + option.defaultValue + ']';\n            }\n            console.log(log);\n            if (opt_extOptions) {\n                opt_extOptions[option.opt] = option;\n            }\n        }\n    }\n    /**\n     * Assuming that the this program can run by itself, to print out the program's\n     * help. Also assuming that the commands are called cmd-run and cmd-help.\n     */\n    printHelp() {\n        console.log('\\n' +\n            'Usage:        ' + this.cmd + ' [options]\\n' +\n            '              ' + this.cmd + ' help\\n' +\n            'Description:  ' + this.cmdDescription + '\\n');\n        console.log('Options:');\n        this.printOptions(this.posDescription(), this.posDefault());\n    }\n    posDescription() {\n        return this.lengthOf_('opt') + 2 * Program.MIN_SPACING;\n    }\n    posDefault() {\n        return this.posDescription() + this.lengthOf_('description') + Program.MIN_SPACING;\n    }\n    lengthOf_(param) {\n        let maxLength = -1;\n        for (let opt in this.options) {\n            let option = this.options[opt];\n            if (param === 'description') {\n                maxLength = Math.max(maxLength, option.description.length);\n            }\n            else if (param === 'opt') {\n                maxLength = Math.max(maxLength, option.opt.length);\n            }\n        }\n        return maxLength;\n    }\n    /**\n     * Create a collection of options used by this program.\n     * @returns The options used in the programs.\n     */\n    getOptions_(allOptions) {\n        for (let opt in this.options) {\n            allOptions[opt] = this.options[opt];\n        }\n        return allOptions;\n    }\n    /**\n     * Get the options used by the program and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n    getMinimistOptions() {\n        let allOptions = {};\n        allOptions = this.getOptions_(allOptions);\n        let minimistOptions = {};\n        let minimistBoolean = [];\n        let minimistString = [];\n        let minimistNumber = [];\n        let minimistDefault = {};\n        for (let opt in allOptions) {\n            let option = allOptions[opt];\n            if (option.type === 'boolean') {\n                minimistBoolean.push(option.opt);\n            }\n            else if (option.type === 'string') {\n                minimistString.push(option.opt);\n            }\n            else if (option.type === 'number') {\n                minimistNumber.push(option.opt);\n            }\n            if (typeof option.defaultValue !== 'undefined') {\n                minimistDefault[option.opt] = option.defaultValue;\n            }\n        }\n        minimistOptions['boolean'] = minimistBoolean;\n        minimistOptions['string'] = minimistString;\n        minimistOptions['number'] = minimistNumber;\n        minimistOptions['default'] = minimistDefault;\n        return minimistOptions;\n    }\n}\nProgram.MIN_SPACING = 4;\nexports.Program = Program;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}