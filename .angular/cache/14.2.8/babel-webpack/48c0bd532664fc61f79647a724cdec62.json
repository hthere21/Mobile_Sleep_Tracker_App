{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst cli_1 = require(\"./cli\");\n\nlet logger = new cli_1.Logger('config');\n/**\n * The configuration for webdriver-manager\n *\n * The config.json, package.json, and selenium directory are found in the\n * same location at the root directory in webdriver-manager.\n *\n */\n\nclass Config {\n  static osArch() {\n    return Config.osArch_;\n  }\n\n  static osType() {\n    return Config.osType_;\n  }\n\n  static noProxy() {\n    return Config.noProxy_;\n  }\n\n  static httpProxy() {\n    return Config.httpProxy_;\n  }\n\n  static httpsProxy() {\n    return Config.httpsProxy_;\n  }\n\n  static getConfigFile_() {\n    return path.resolve(Config.dir, '..', Config.configFile);\n  }\n\n  static getPackageFile_() {\n    return path.resolve(Config.dir, '..', Config.packageFile);\n  }\n\n  static getSeleniumDir() {\n    return path.resolve(Config.dir, '..', '..', 'selenium/');\n  }\n\n  static getBaseDir() {\n    return path.resolve(Config.dir, '..', '..');\n  }\n  /**\n   * Get the binary versions from the configuration file.\n   * @returns A map of the versions defined in the configuration file.\n   */\n\n\n  static binaryVersions() {\n    let configFile = require(Config.getConfigFile_());\n\n    let configVersions = {};\n    configVersions.selenium = configFile.webdriverVersions.selenium;\n    configVersions.chrome = configFile.webdriverVersions.chromedriver;\n    configVersions.gecko = configFile.webdriverVersions.geckodriver;\n    configVersions.ie = configFile.webdriverVersions.iedriver;\n    configVersions.android = configFile.webdriverVersions.androidsdk;\n    configVersions.appium = configFile.webdriverVersions.appium;\n    configVersions.maxChrome = configFile.webdriverVersions.maxChromedriver;\n    return configVersions;\n  }\n  /**\n   * Get the CDN urls from the configuration file.\n   * @returns A map of the CDN versions defined in the configuration file.\n   */\n\n\n  static cdnUrls() {\n    let configFile = require(Config.getConfigFile_());\n\n    let configCdnUrls = {};\n    configCdnUrls.selenium = configFile.cdnUrls.selenium;\n    configCdnUrls.chrome = configFile.cdnUrls.chromedriver;\n    configCdnUrls.gecko = configFile.cdnUrls.geckodriver;\n    configCdnUrls.ie = configFile.cdnUrls.iedriver;\n    configCdnUrls.android = configFile.cdnUrls.androidsdk;\n    return configCdnUrls;\n  }\n  /**\n   * Get the package version.\n   */\n\n\n  static getVersion() {\n    let packageFile = require(Config.getPackageFile_());\n\n    return packageFile.version;\n  }\n\n}\n\nConfig.configFile = 'config.json';\nConfig.packageFile = 'package.json';\nConfig.nodeModuleName = 'webdriver-manager';\nConfig.cwd = process.cwd();\nConfig.parentPath = path.resolve(Config.cwd, '..');\nConfig.dir = __dirname;\nConfig.folder = Config.cwd.replace(Config.parentPath, '').substring(1);\nConfig.isProjectVersion = Config.folder === Config.nodeModuleName;\nConfig.isLocalVersion = false;\nConfig.osArch_ = os.arch();\nConfig.osType_ = os.type();\nConfig.noProxy_ = process.env.NO_PROXY || process.env.no_proxy;\nConfig.httpsProxy_ = process.env.HTTPS_PROXY || process.env.https_proxy;\nConfig.httpProxy_ = process.env.HTTP_PROXY || process.env.http_proxy;\nexports.Config = Config;","map":{"version":3,"names":["Object","defineProperty","exports","value","os","require","path","cli_1","logger","Logger","Config","osArch","osArch_","osType","osType_","noProxy","noProxy_","httpProxy","httpProxy_","httpsProxy","httpsProxy_","getConfigFile_","resolve","dir","configFile","getPackageFile_","packageFile","getSeleniumDir","getBaseDir","binaryVersions","configVersions","selenium","webdriverVersions","chrome","chromedriver","gecko","geckodriver","ie","iedriver","android","androidsdk","appium","maxChrome","maxChromedriver","cdnUrls","configCdnUrls","getVersion","version","nodeModuleName","cwd","process","parentPath","__dirname","folder","replace","substring","isProjectVersion","isLocalVersion","arch","type","env","NO_PROXY","no_proxy","HTTPS_PROXY","https_proxy","HTTP_PROXY","http_proxy"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/webdriver-manager/built/lib/config.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst cli_1 = require(\"./cli\");\nlet logger = new cli_1.Logger('config');\n/**\n * The configuration for webdriver-manager\n *\n * The config.json, package.json, and selenium directory are found in the\n * same location at the root directory in webdriver-manager.\n *\n */\nclass Config {\n    static osArch() {\n        return Config.osArch_;\n    }\n    static osType() {\n        return Config.osType_;\n    }\n    static noProxy() {\n        return Config.noProxy_;\n    }\n    static httpProxy() {\n        return Config.httpProxy_;\n    }\n    static httpsProxy() {\n        return Config.httpsProxy_;\n    }\n    static getConfigFile_() {\n        return path.resolve(Config.dir, '..', Config.configFile);\n    }\n    static getPackageFile_() {\n        return path.resolve(Config.dir, '..', Config.packageFile);\n    }\n    static getSeleniumDir() {\n        return path.resolve(Config.dir, '..', '..', 'selenium/');\n    }\n    static getBaseDir() {\n        return path.resolve(Config.dir, '..', '..');\n    }\n    /**\n     * Get the binary versions from the configuration file.\n     * @returns A map of the versions defined in the configuration file.\n     */\n    static binaryVersions() {\n        let configFile = require(Config.getConfigFile_());\n        let configVersions = {};\n        configVersions.selenium = configFile.webdriverVersions.selenium;\n        configVersions.chrome = configFile.webdriverVersions.chromedriver;\n        configVersions.gecko = configFile.webdriverVersions.geckodriver;\n        configVersions.ie = configFile.webdriverVersions.iedriver;\n        configVersions.android = configFile.webdriverVersions.androidsdk;\n        configVersions.appium = configFile.webdriverVersions.appium;\n        configVersions.maxChrome = configFile.webdriverVersions.maxChromedriver;\n        return configVersions;\n    }\n    /**\n     * Get the CDN urls from the configuration file.\n     * @returns A map of the CDN versions defined in the configuration file.\n     */\n    static cdnUrls() {\n        let configFile = require(Config.getConfigFile_());\n        let configCdnUrls = {};\n        configCdnUrls.selenium = configFile.cdnUrls.selenium;\n        configCdnUrls.chrome = configFile.cdnUrls.chromedriver;\n        configCdnUrls.gecko = configFile.cdnUrls.geckodriver;\n        configCdnUrls.ie = configFile.cdnUrls.iedriver;\n        configCdnUrls.android = configFile.cdnUrls.androidsdk;\n        return configCdnUrls;\n    }\n    /**\n     * Get the package version.\n     */\n    static getVersion() {\n        let packageFile = require(Config.getPackageFile_());\n        return packageFile.version;\n    }\n}\nConfig.configFile = 'config.json';\nConfig.packageFile = 'package.json';\nConfig.nodeModuleName = 'webdriver-manager';\nConfig.cwd = process.cwd();\nConfig.parentPath = path.resolve(Config.cwd, '..');\nConfig.dir = __dirname;\nConfig.folder = Config.cwd.replace(Config.parentPath, '').substring(1);\nConfig.isProjectVersion = Config.folder === Config.nodeModuleName;\nConfig.isLocalVersion = false;\nConfig.osArch_ = os.arch();\nConfig.osType_ = os.type();\nConfig.noProxy_ = process.env.NO_PROXY || process.env.no_proxy;\nConfig.httpsProxy_ = process.env.HTTPS_PROXY || process.env.https_proxy;\nConfig.httpProxy_ = process.env.HTTP_PROXY || process.env.http_proxy;\nexports.Config = Config;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}