{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an implementation of the Kobiton Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\n\nconst q = require(\"q\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nlet logger = new logger_1.Logger('kobiton');\n\nclass Kobiton extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *      ready to test.\n   */\n\n\n  setupDriverEnv() {\n    let deferred = q.defer();\n    this.config_.capabilities['kobitonUser'] = this.config_.kobitonUser;\n    this.config_.capabilities['kobitonKey'] = this.config_.kobitonKey;\n    this.config_.seleniumAddress = 'https://' + this.config_.kobitonUser + ':' + this.config_.kobitonKey + '@api.kobiton.com/wd/hub';\n    logger.info('Using Kobiton selenium server at ' + this.config_.seleniumAddress);\n    deferred.resolve();\n    return deferred.promise;\n  }\n\n}\n\nexports.Kobiton = Kobiton;","map":{"version":3,"names":["Object","defineProperty","exports","value","q","require","logger_1","driverProvider_1","logger","Logger","Kobiton","DriverProvider","constructor","config","setupDriverEnv","deferred","defer","config_","capabilities","kobitonUser","kobitonKey","seleniumAddress","info","resolve","promise"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/kobiton.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * This is an implementation of the Kobiton Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\nconst q = require(\"q\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nlet logger = new logger_1.Logger('kobiton');\nclass Kobiton extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *      ready to test.\n     */\n    setupDriverEnv() {\n        let deferred = q.defer();\n        this.config_.capabilities['kobitonUser'] = this.config_.kobitonUser;\n        this.config_.capabilities['kobitonKey'] = this.config_.kobitonKey;\n        this.config_.seleniumAddress = 'https://' + this.config_.kobitonUser + ':' +\n            this.config_.kobitonKey + '@api.kobiton.com/wd/hub';\n        logger.info('Using Kobiton selenium server at ' + this.config_.seleniumAddress);\n        deferred.resolve();\n        return deferred.promise;\n    }\n}\nexports.Kobiton = Kobiton;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAAhC;;AACA,IAAIG,MAAM,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB,SAApB,CAAb;;AACA,MAAMC,OAAN,SAAsBH,gBAAgB,CAACI,cAAvC,CAAsD;EAClDC,WAAW,CAACC,MAAD,EAAS;IAChB,MAAMA,MAAN;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,cAAc,GAAG;IACb,IAAIC,QAAQ,GAAGX,CAAC,CAACY,KAAF,EAAf;IACA,KAAKC,OAAL,CAAaC,YAAb,CAA0B,aAA1B,IAA2C,KAAKD,OAAL,CAAaE,WAAxD;IACA,KAAKF,OAAL,CAAaC,YAAb,CAA0B,YAA1B,IAA0C,KAAKD,OAAL,CAAaG,UAAvD;IACA,KAAKH,OAAL,CAAaI,eAAb,GAA+B,aAAa,KAAKJ,OAAL,CAAaE,WAA1B,GAAwC,GAAxC,GAC3B,KAAKF,OAAL,CAAaG,UADc,GACD,yBAD9B;IAEAZ,MAAM,CAACc,IAAP,CAAY,sCAAsC,KAAKL,OAAL,CAAaI,eAA/D;IACAN,QAAQ,CAACQ,OAAT;IACA,OAAOR,QAAQ,CAACS,OAAhB;EACH;;AAlBiD;;AAoBtDtB,OAAO,CAACQ,OAAR,GAAkBA,OAAlB"},"metadata":{},"sourceType":"script"}