{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\"); // Will use chalk if chalk is available to add color to console logging\n\n\nlet chalk;\nlet printRed;\nlet printYellow;\nlet printGray;\n\ntry {\n  chalk = require('chalk');\n  printRed = chalk.red;\n  printYellow = chalk.yellow;\n  printGray = chalk.gray;\n} catch (e) {\n  printRed = printYellow = printGray = msg => {\n    return msg;\n  };\n}\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n  LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n\nvar WriteTo;\n\n(function (WriteTo) {\n  WriteTo[WriteTo[\"CONSOLE\"] = 0] = \"CONSOLE\";\n  WriteTo[WriteTo[\"FILE\"] = 1] = \"FILE\";\n  WriteTo[WriteTo[\"BOTH\"] = 2] = \"BOTH\";\n  WriteTo[WriteTo[\"NONE\"] = 3] = \"NONE\";\n})(WriteTo = exports.WriteTo || (exports.WriteTo = {}));\n\nlet logFile = 'webdriver.log'; // the default log file name\n\n/**\n * Logger class adds timestamp output, log levels, and identifiers to help\n * when debugging. Also could write to console, file, both, or none.\n */\n\nclass Logger {\n  /**\n   * Creates a logger instance with an ID for the logger.\n   * @constructor\n   */\n  constructor(id) {\n    this.id = id;\n  }\n  /**\n   * Set up the write location. If writing to a file, get the file descriptor.\n   * @param writeTo The enum for where to write the logs.\n   * @param opt_logFile An optional parameter to override the log file location.\n   */\n\n\n  static setWrite(writeTo, opt_logFile) {\n    if (opt_logFile) {\n      logFile = opt_logFile;\n    }\n\n    Logger.writeTo = writeTo;\n\n    if (Logger.writeTo == WriteTo.FILE || Logger.writeTo == WriteTo.BOTH) {\n      Logger.fd = fs.openSync(path.resolve(logFile), 'a');\n      Logger.firstWrite = false;\n    }\n  }\n  /**\n   * Log INFO\n   * @param ...msgs multiple arguments to be logged.\n   */\n\n\n  info(...msgs) {\n    this.log_(LogLevel.INFO, msgs);\n  }\n  /**\n   * Log DEBUG\n   * @param ...msgs multiple arguments to be logged.\n   */\n\n\n  debug(...msgs) {\n    this.log_(LogLevel.DEBUG, msgs);\n  }\n  /**\n   * Log WARN\n   * @param ...msgs multiple arguments to be logged.\n   */\n\n\n  warn(...msgs) {\n    this.log_(LogLevel.WARN, msgs);\n  }\n  /**\n   * Log ERROR\n   * @param ...msgs multiple arguments to be logged.\n   */\n\n\n  error(...msgs) {\n    this.log_(LogLevel.ERROR, msgs);\n  }\n  /**\n   * For the log level set, check to see if the messages should be logged.\n   * @param logLevel The log level of the message.\n   * @param msgs The messages to be logged\n   */\n\n\n  log_(logLevel, msgs) {\n    switch (Logger.logLevel) {\n      case LogLevel.ERROR:\n        if (logLevel <= LogLevel.ERROR) {\n          this.print_(logLevel, msgs);\n        }\n\n        break;\n\n      case LogLevel.WARN:\n        if (logLevel <= LogLevel.WARN) {\n          this.print_(logLevel, msgs);\n        }\n\n        break;\n\n      case LogLevel.INFO:\n        if (logLevel <= LogLevel.INFO) {\n          this.print_(logLevel, msgs);\n        }\n\n        break;\n\n      case LogLevel.DEBUG:\n        if (logLevel <= LogLevel.DEBUG) {\n          this.print_(logLevel, msgs);\n        }\n\n        break;\n\n      default:\n        throw new Error('Log level undefined');\n    }\n  }\n  /**\n   * Format with timestamp, log level, identifier, and message and log to\n   * specified medium (console, file, both, none).\n   * @param logLevel The log level of the message.\n   * @param msgs The messages to be logged.\n   */\n\n\n  print_(logLevel, msgs) {\n    let consoleLog = '';\n    let fileLog = '';\n\n    if (Logger.showTimestamp) {\n      consoleLog += Logger.timestamp_(WriteTo.CONSOLE);\n      fileLog += Logger.timestamp_(WriteTo.FILE);\n    }\n\n    consoleLog += Logger.level_(logLevel, this.id, WriteTo.CONSOLE);\n    fileLog += Logger.level_(logLevel, this.id, WriteTo.FILE);\n\n    if (Logger.showId) {\n      consoleLog += Logger.id_(logLevel, this.id, WriteTo.CONSOLE);\n      fileLog += Logger.id_(logLevel, this.id, WriteTo.FILE);\n    }\n\n    consoleLog += ' -';\n    fileLog += ' - ';\n\n    switch (Logger.writeTo) {\n      case WriteTo.CONSOLE:\n        msgs.unshift(consoleLog);\n        console.log.apply(console, msgs);\n        break;\n\n      case WriteTo.FILE:\n        // for the first line written to the file, add a space\n        if (!Logger.firstWrite) {\n          fs.writeSync(Logger.fd, '\\n');\n          Logger.firstWrite = true;\n        }\n\n        fileLog += ' ' + Logger.msgToFile_(msgs);\n        fs.writeSync(Logger.fd, fileLog + '\\n');\n        break;\n\n      case WriteTo.BOTH:\n        // for the first line written to the file, add a space\n        if (!Logger.firstWrite) {\n          fs.writeSync(Logger.fd, '\\n');\n          Logger.firstWrite = true;\n        }\n\n        fileLog += ' ' + Logger.msgToFile_(msgs);\n        fs.writeSync(Logger.fd, fileLog + '\\n');\n        msgs.unshift(consoleLog);\n        console.log.apply(console, msgs);\n        break;\n\n      case WriteTo.NONE:\n        break;\n    }\n  }\n  /**\n   * Get a timestamp formatted with [hh:mm:ss]\n   * @param writeTo The enum for where to write the logs.\n   * @return The string of the formatted timestamp\n   */\n\n\n  static timestamp_(writeTo) {\n    let d = new Date();\n    let ts = '[';\n    let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n    let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n    let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n\n    if (writeTo == WriteTo.CONSOLE) {\n      ts += printGray(hours + ':' + minutes + ':' + seconds) + ']';\n    } else {\n      ts += hours + ':' + minutes + ':' + seconds + ']';\n    }\n\n    ts += ' ';\n    return ts;\n  }\n  /**\n   * Get the identifier of the logger as '/<id>'\n   * @param logLevel The log level of the message.\n   * @param writeTo The enum for where to write the logs.\n   * @return The string of the formatted id\n   */\n\n\n  static id_(logLevel, id, writeTo) {\n    let level = LogLevel[logLevel].toString();\n\n    if (writeTo === WriteTo.FILE) {\n      return '/' + id;\n    } else if (logLevel === LogLevel.ERROR) {\n      return printRed('/' + id);\n    } else if (logLevel === LogLevel.WARN) {\n      return printYellow('/' + id);\n    } else {\n      return '/' + id;\n    }\n  }\n  /**\n   * Get the log level formatted with the first letter. For info, it is I.\n   * @param logLevel The log level of the message.\n   * @param writeTo The enum for where to write the logs.\n   * @return The string of the formatted log level\n   */\n\n\n  static level_(logLevel, id, writeTo) {\n    let level = LogLevel[logLevel].toString();\n\n    if (writeTo === WriteTo.FILE) {\n      return level[0];\n    } else if (logLevel === LogLevel.ERROR) {\n      return printRed(level[0]);\n    } else if (logLevel === LogLevel.WARN) {\n      return printYellow(level[0]);\n    } else {\n      return level[0];\n    }\n  }\n  /**\n   * Convert the list of messages to a single string message.\n   * @param msgs The list of messages.\n   * @return The string of the formatted messages\n   */\n\n\n  static msgToFile_(msgs) {\n    let log = '';\n\n    for (let pos = 0; pos < msgs.length; pos++) {\n      let msg = msgs[pos];\n      let ret;\n\n      if (typeof msg === 'object') {\n        ret = JSON.stringify(msg);\n      } else {\n        ret = msg;\n      }\n\n      if (pos !== msgs.length - 1) {\n        ret += ' ';\n      }\n\n      log += ret;\n    }\n\n    return log;\n  }\n\n}\n\nLogger.logLevel = LogLevel.INFO;\nLogger.showTimestamp = true;\nLogger.showId = true;\nLogger.writeTo = WriteTo.CONSOLE;\nLogger.firstWrite = false;\nexports.Logger = Logger;","map":{"version":3,"names":["Object","defineProperty","exports","value","fs","require","path","chalk","printRed","printYellow","printGray","red","yellow","gray","e","msg","LogLevel","WriteTo","logFile","Logger","constructor","id","setWrite","writeTo","opt_logFile","FILE","BOTH","fd","openSync","resolve","firstWrite","info","msgs","log_","INFO","debug","DEBUG","warn","WARN","error","ERROR","logLevel","print_","Error","consoleLog","fileLog","showTimestamp","timestamp_","CONSOLE","level_","showId","id_","unshift","console","log","apply","writeSync","msgToFile_","NONE","d","Date","ts","hours","getHours","minutes","getMinutes","seconds","getSeconds","level","toString","pos","length","ret","JSON","stringify"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/webdriver-manager/built/lib/cli/logger.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n// Will use chalk if chalk is available to add color to console logging\nlet chalk;\nlet printRed;\nlet printYellow;\nlet printGray;\ntry {\n    chalk = require('chalk');\n    printRed = chalk.red;\n    printYellow = chalk.yellow;\n    printGray = chalk.gray;\n}\ncatch (e) {\n    printRed = printYellow = printGray = (msg) => {\n        return msg;\n    };\n}\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nvar WriteTo;\n(function (WriteTo) {\n    WriteTo[WriteTo[\"CONSOLE\"] = 0] = \"CONSOLE\";\n    WriteTo[WriteTo[\"FILE\"] = 1] = \"FILE\";\n    WriteTo[WriteTo[\"BOTH\"] = 2] = \"BOTH\";\n    WriteTo[WriteTo[\"NONE\"] = 3] = \"NONE\";\n})(WriteTo = exports.WriteTo || (exports.WriteTo = {}));\nlet logFile = 'webdriver.log'; // the default log file name\n/**\n * Logger class adds timestamp output, log levels, and identifiers to help\n * when debugging. Also could write to console, file, both, or none.\n */\nclass Logger {\n    /**\n     * Creates a logger instance with an ID for the logger.\n     * @constructor\n     */\n    constructor(id) {\n        this.id = id;\n    }\n    /**\n     * Set up the write location. If writing to a file, get the file descriptor.\n     * @param writeTo The enum for where to write the logs.\n     * @param opt_logFile An optional parameter to override the log file location.\n     */\n    static setWrite(writeTo, opt_logFile) {\n        if (opt_logFile) {\n            logFile = opt_logFile;\n        }\n        Logger.writeTo = writeTo;\n        if (Logger.writeTo == WriteTo.FILE || Logger.writeTo == WriteTo.BOTH) {\n            Logger.fd = fs.openSync(path.resolve(logFile), 'a');\n            Logger.firstWrite = false;\n        }\n    }\n    /**\n     * Log INFO\n     * @param ...msgs multiple arguments to be logged.\n     */\n    info(...msgs) {\n        this.log_(LogLevel.INFO, msgs);\n    }\n    /**\n     * Log DEBUG\n     * @param ...msgs multiple arguments to be logged.\n     */\n    debug(...msgs) {\n        this.log_(LogLevel.DEBUG, msgs);\n    }\n    /**\n     * Log WARN\n     * @param ...msgs multiple arguments to be logged.\n     */\n    warn(...msgs) {\n        this.log_(LogLevel.WARN, msgs);\n    }\n    /**\n     * Log ERROR\n     * @param ...msgs multiple arguments to be logged.\n     */\n    error(...msgs) {\n        this.log_(LogLevel.ERROR, msgs);\n    }\n    /**\n     * For the log level set, check to see if the messages should be logged.\n     * @param logLevel The log level of the message.\n     * @param msgs The messages to be logged\n     */\n    log_(logLevel, msgs) {\n        switch (Logger.logLevel) {\n            case LogLevel.ERROR:\n                if (logLevel <= LogLevel.ERROR) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            case LogLevel.WARN:\n                if (logLevel <= LogLevel.WARN) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            case LogLevel.INFO:\n                if (logLevel <= LogLevel.INFO) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            case LogLevel.DEBUG:\n                if (logLevel <= LogLevel.DEBUG) {\n                    this.print_(logLevel, msgs);\n                }\n                break;\n            default:\n                throw new Error('Log level undefined');\n        }\n    }\n    /**\n     * Format with timestamp, log level, identifier, and message and log to\n     * specified medium (console, file, both, none).\n     * @param logLevel The log level of the message.\n     * @param msgs The messages to be logged.\n     */\n    print_(logLevel, msgs) {\n        let consoleLog = '';\n        let fileLog = '';\n        if (Logger.showTimestamp) {\n            consoleLog += Logger.timestamp_(WriteTo.CONSOLE);\n            fileLog += Logger.timestamp_(WriteTo.FILE);\n        }\n        consoleLog += Logger.level_(logLevel, this.id, WriteTo.CONSOLE);\n        fileLog += Logger.level_(logLevel, this.id, WriteTo.FILE);\n        if (Logger.showId) {\n            consoleLog += Logger.id_(logLevel, this.id, WriteTo.CONSOLE);\n            fileLog += Logger.id_(logLevel, this.id, WriteTo.FILE);\n        }\n        consoleLog += ' -';\n        fileLog += ' - ';\n        switch (Logger.writeTo) {\n            case WriteTo.CONSOLE:\n                msgs.unshift(consoleLog);\n                console.log.apply(console, msgs);\n                break;\n            case WriteTo.FILE:\n                // for the first line written to the file, add a space\n                if (!Logger.firstWrite) {\n                    fs.writeSync(Logger.fd, '\\n');\n                    Logger.firstWrite = true;\n                }\n                fileLog += ' ' + Logger.msgToFile_(msgs);\n                fs.writeSync(Logger.fd, fileLog + '\\n');\n                break;\n            case WriteTo.BOTH:\n                // for the first line written to the file, add a space\n                if (!Logger.firstWrite) {\n                    fs.writeSync(Logger.fd, '\\n');\n                    Logger.firstWrite = true;\n                }\n                fileLog += ' ' + Logger.msgToFile_(msgs);\n                fs.writeSync(Logger.fd, fileLog + '\\n');\n                msgs.unshift(consoleLog);\n                console.log.apply(console, msgs);\n                break;\n            case WriteTo.NONE:\n                break;\n        }\n    }\n    /**\n     * Get a timestamp formatted with [hh:mm:ss]\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted timestamp\n     */\n    static timestamp_(writeTo) {\n        let d = new Date();\n        let ts = '[';\n        let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n        let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n        let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n        if (writeTo == WriteTo.CONSOLE) {\n            ts += printGray(hours + ':' + minutes + ':' + seconds) + ']';\n        }\n        else {\n            ts += hours + ':' + minutes + ':' + seconds + ']';\n        }\n        ts += ' ';\n        return ts;\n    }\n    /**\n     * Get the identifier of the logger as '/<id>'\n     * @param logLevel The log level of the message.\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted id\n     */\n    static id_(logLevel, id, writeTo) {\n        let level = LogLevel[logLevel].toString();\n        if (writeTo === WriteTo.FILE) {\n            return '/' + id;\n        }\n        else if (logLevel === LogLevel.ERROR) {\n            return printRed('/' + id);\n        }\n        else if (logLevel === LogLevel.WARN) {\n            return printYellow('/' + id);\n        }\n        else {\n            return '/' + id;\n        }\n    }\n    /**\n     * Get the log level formatted with the first letter. For info, it is I.\n     * @param logLevel The log level of the message.\n     * @param writeTo The enum for where to write the logs.\n     * @return The string of the formatted log level\n     */\n    static level_(logLevel, id, writeTo) {\n        let level = LogLevel[logLevel].toString();\n        if (writeTo === WriteTo.FILE) {\n            return level[0];\n        }\n        else if (logLevel === LogLevel.ERROR) {\n            return printRed(level[0]);\n        }\n        else if (logLevel === LogLevel.WARN) {\n            return printYellow(level[0]);\n        }\n        else {\n            return level[0];\n        }\n    }\n    /**\n     * Convert the list of messages to a single string message.\n     * @param msgs The list of messages.\n     * @return The string of the formatted messages\n     */\n    static msgToFile_(msgs) {\n        let log = '';\n        for (let pos = 0; pos < msgs.length; pos++) {\n            let msg = msgs[pos];\n            let ret;\n            if (typeof msg === 'object') {\n                ret = JSON.stringify(msg);\n            }\n            else {\n                ret = msg;\n            }\n            if (pos !== msgs.length - 1) {\n                ret += ' ';\n            }\n            log += ret;\n        }\n        return log;\n    }\n}\nLogger.logLevel = LogLevel.INFO;\nLogger.showTimestamp = true;\nLogger.showId = true;\nLogger.writeTo = WriteTo.CONSOLE;\nLogger.firstWrite = false;\nexports.Logger = Logger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}