{"ast":null,"code":"import _asyncToGenerator from \"/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport LocalForage from 'localforage';\n/** @hidden */\n\nexport const Drivers = {\n  SecureStorage: 'ionicSecureStorage',\n  IndexedDB: LocalForage.INDEXEDDB,\n  LocalStorage: LocalForage.LOCALSTORAGE\n};\nconst defaultConfig = {\n  name: '_ionicstorage',\n  storeName: '_ionickv',\n  dbKey: '_ionickey',\n  driverOrder: [Drivers.SecureStorage, Drivers.IndexedDB, Drivers.LocalStorage]\n};\nexport class Storage {\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible default driverOrder options are: ['indexeddb', 'localstorage'] and the\n   * default is that exact ordering.\n   *\n   * When using Ionic Secure Storage (enterprise only), use ['ionicSecureStorage', 'indexeddb', 'localstorage'] to ensure\n   * Secure Storage is used when available, or fall back to IndexedDB or LocalStorage on the web.\n   */\n  constructor(config = defaultConfig) {\n    this._db = null;\n    this._secureStorageDriver = null;\n    const actualConfig = Object.assign({}, defaultConfig, config || {});\n    this._config = actualConfig;\n  }\n\n  create() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const db = LocalForage.createInstance(_this._config);\n      _this._db = db;\n      yield db.setDriver(_this._config.driverOrder || []);\n      return _this;\n    })();\n  }\n  /**\n   * Define a new Driver. Must be called before\n   * initializing the database. Example:\n   *\n   * await storage.defineDriver(myDriver);\n   * await storage.create();\n   */\n\n\n  defineDriver(driver) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (driver._driver === Drivers.SecureStorage) {\n        _this2._secureStorageDriver = driver;\n      }\n\n      return LocalForage.defineDriver(driver);\n    })();\n  }\n  /**\n   * Get the name of the driver being used.\n   * @returns Name of the driver\n   */\n\n\n  get driver() {\n    var _a;\n\n    return ((_a = this._db) === null || _a === void 0 ? void 0 : _a.driver()) || null;\n  }\n\n  assertDb() {\n    if (!this._db) {\n      throw new Error('Database not created. Must call create() first');\n    }\n\n    return this._db;\n  }\n  /**\n   * Get the value associated with the given key.\n   * @param key the key to identify this value\n   * @returns Returns a promise with the value of the given key\n   */\n\n\n  get(key) {\n    const db = this.assertDb();\n    return db.getItem(key);\n  }\n  /**\n   * Set the value for the given key.\n   * @param key the key to identify this value\n   * @param value the value for this key\n   * @returns Returns a promise that resolves when the key and value are set\n   */\n\n\n  set(key, value) {\n    const db = this.assertDb();\n    return db.setItem(key, value);\n  }\n  /**\n   * Remove any value associated with this key.\n   * @param key the key to identify this value\n   * @returns Returns a promise that resolves when the value is removed\n   */\n\n\n  remove(key) {\n    const db = this.assertDb();\n    return db.removeItem(key);\n  }\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @returns Returns a promise that resolves when the store is cleared\n   */\n\n\n  clear() {\n    const db = this.assertDb();\n    return db.clear();\n  }\n  /**\n   * @returns Returns a promise that resolves with the number of keys stored.\n   */\n\n\n  length() {\n    const db = this.assertDb();\n    return db.length();\n  }\n  /**\n   * @returns Returns a promise that resolves with the keys in the store.\n   */\n\n\n  keys() {\n    const db = this.assertDb();\n    return db.keys();\n  }\n  /**\n   * Iterate through each key,value pair.\n   * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @returns Returns a promise that resolves when the iteration has finished.\n   */\n\n\n  forEach(iteratorCallback) {\n    const db = this.assertDb();\n    return db.iterate(iteratorCallback);\n  }\n\n  setEncryptionKey(key) {\n    var _a;\n\n    if (!this._secureStorageDriver) {\n      throw new Error('@ionic-enterprise/secure-storage not installed. Encryption support not available');\n    } else {\n      (_a = this._secureStorageDriver) === null || _a === void 0 ? void 0 : _a.setEncryptionKey(key);\n    }\n  }\n\n}","map":{"version":3,"names":["LocalForage","Drivers","SecureStorage","IndexedDB","INDEXEDDB","LocalStorage","LOCALSTORAGE","defaultConfig","name","storeName","dbKey","driverOrder","Storage","constructor","config","_db","_secureStorageDriver","actualConfig","Object","assign","_config","create","db","createInstance","setDriver","defineDriver","driver","_driver","_a","assertDb","Error","get","key","getItem","set","value","setItem","remove","removeItem","clear","length","keys","forEach","iteratorCallback","iterate","setEncryptionKey"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/@ionic/storage/dist/esm/index.js"],"sourcesContent":["import LocalForage from 'localforage';\n/** @hidden */\nexport const Drivers = {\n    SecureStorage: 'ionicSecureStorage',\n    IndexedDB: LocalForage.INDEXEDDB,\n    LocalStorage: LocalForage.LOCALSTORAGE\n};\nconst defaultConfig = {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: [\n        Drivers.SecureStorage,\n        Drivers.IndexedDB,\n        Drivers.LocalStorage\n    ]\n};\nexport class Storage {\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible default driverOrder options are: ['indexeddb', 'localstorage'] and the\n     * default is that exact ordering.\n     *\n     * When using Ionic Secure Storage (enterprise only), use ['ionicSecureStorage', 'indexeddb', 'localstorage'] to ensure\n     * Secure Storage is used when available, or fall back to IndexedDB or LocalStorage on the web.\n     */\n    constructor(config = defaultConfig) {\n        this._db = null;\n        this._secureStorageDriver = null;\n        const actualConfig = Object.assign({}, defaultConfig, config || {});\n        this._config = actualConfig;\n    }\n    async create() {\n        const db = LocalForage.createInstance(this._config);\n        this._db = db;\n        await db.setDriver(this._config.driverOrder || []);\n        return this;\n    }\n    /**\n     * Define a new Driver. Must be called before\n     * initializing the database. Example:\n     *\n     * await storage.defineDriver(myDriver);\n     * await storage.create();\n     */\n    async defineDriver(driver) {\n        if (driver._driver === Drivers.SecureStorage) {\n            this._secureStorageDriver = driver;\n        }\n        return LocalForage.defineDriver(driver);\n    }\n    /**\n     * Get the name of the driver being used.\n     * @returns Name of the driver\n     */\n    get driver() {\n        var _a;\n        return ((_a = this._db) === null || _a === void 0 ? void 0 : _a.driver()) || null;\n    }\n    assertDb() {\n        if (!this._db) {\n            throw new Error('Database not created. Must call create() first');\n        }\n        return this._db;\n    }\n    /**\n     * Get the value associated with the given key.\n     * @param key the key to identify this value\n     * @returns Returns a promise with the value of the given key\n     */\n    get(key) {\n        const db = this.assertDb();\n        return db.getItem(key);\n    }\n    /**\n     * Set the value for the given key.\n     * @param key the key to identify this value\n     * @param value the value for this key\n     * @returns Returns a promise that resolves when the key and value are set\n     */\n    set(key, value) {\n        const db = this.assertDb();\n        return db.setItem(key, value);\n    }\n    /**\n     * Remove any value associated with this key.\n     * @param key the key to identify this value\n     * @returns Returns a promise that resolves when the value is removed\n     */\n    remove(key) {\n        const db = this.assertDb();\n        return db.removeItem(key);\n    }\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @returns Returns a promise that resolves when the store is cleared\n     */\n    clear() {\n        const db = this.assertDb();\n        return db.clear();\n    }\n    /**\n     * @returns Returns a promise that resolves with the number of keys stored.\n     */\n    length() {\n        const db = this.assertDb();\n        return db.length();\n    }\n    /**\n     * @returns Returns a promise that resolves with the keys in the store.\n     */\n    keys() {\n        const db = this.assertDb();\n        return db.keys();\n    }\n    /**\n     * Iterate through each key,value pair.\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @returns Returns a promise that resolves when the iteration has finished.\n     */\n    forEach(iteratorCallback) {\n        const db = this.assertDb();\n        return db.iterate(iteratorCallback);\n    }\n    setEncryptionKey(key) {\n        var _a;\n        if (!this._secureStorageDriver) {\n            throw new Error('@ionic-enterprise/secure-storage not installed. Encryption support not available');\n        }\n        else {\n            (_a = this._secureStorageDriver) === null || _a === void 0 ? void 0 : _a.setEncryptionKey(key);\n        }\n    }\n}\n"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,aAAxB;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG;EACnBC,aAAa,EAAE,oBADI;EAEnBC,SAAS,EAAEH,WAAW,CAACI,SAFJ;EAGnBC,YAAY,EAAEL,WAAW,CAACM;AAHP,CAAhB;AAKP,MAAMC,aAAa,GAAG;EAClBC,IAAI,EAAE,eADY;EAElBC,SAAS,EAAE,UAFO;EAGlBC,KAAK,EAAE,WAHW;EAIlBC,WAAW,EAAE,CACTV,OAAO,CAACC,aADC,EAETD,OAAO,CAACE,SAFC,EAGTF,OAAO,CAACI,YAHC;AAJK,CAAtB;AAUA,OAAO,MAAMO,OAAN,CAAc;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,MAAM,GAAGP,aAAV,EAAyB;IAChC,KAAKQ,GAAL,GAAW,IAAX;IACA,KAAKC,oBAAL,GAA4B,IAA5B;IACA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,aAAlB,EAAiCO,MAAM,IAAI,EAA3C,CAArB;IACA,KAAKM,OAAL,GAAeH,YAAf;EACH;;EACKI,MAAM,GAAG;IAAA;;IAAA;MACX,MAAMC,EAAE,GAAGtB,WAAW,CAACuB,cAAZ,CAA2B,KAAI,CAACH,OAAhC,CAAX;MACA,KAAI,CAACL,GAAL,GAAWO,EAAX;MACA,MAAMA,EAAE,CAACE,SAAH,CAAa,KAAI,CAACJ,OAAL,CAAaT,WAAb,IAA4B,EAAzC,CAAN;MACA,OAAO,KAAP;IAJW;EAKd;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACUc,YAAY,CAACC,MAAD,EAAS;IAAA;;IAAA;MACvB,IAAIA,MAAM,CAACC,OAAP,KAAmB1B,OAAO,CAACC,aAA/B,EAA8C;QAC1C,MAAI,CAACc,oBAAL,GAA4BU,MAA5B;MACH;;MACD,OAAO1B,WAAW,CAACyB,YAAZ,CAAyBC,MAAzB,CAAP;IAJuB;EAK1B;EACD;AACJ;AACA;AACA;;;EACc,IAANA,MAAM,GAAG;IACT,IAAIE,EAAJ;;IACA,OAAO,CAAC,CAACA,EAAE,GAAG,KAAKb,GAAX,MAAoB,IAApB,IAA4Ba,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACF,MAAH,EAAtD,KAAsE,IAA7E;EACH;;EACDG,QAAQ,GAAG;IACP,IAAI,CAAC,KAAKd,GAAV,EAAe;MACX,MAAM,IAAIe,KAAJ,CAAU,gDAAV,CAAN;IACH;;IACD,OAAO,KAAKf,GAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIgB,GAAG,CAACC,GAAD,EAAM;IACL,MAAMV,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACW,OAAH,CAAWD,GAAX,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIE,GAAG,CAACF,GAAD,EAAMG,KAAN,EAAa;IACZ,MAAMb,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACc,OAAH,CAAWJ,GAAX,EAAgBG,KAAhB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIE,MAAM,CAACL,GAAD,EAAM;IACR,MAAMV,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACgB,UAAH,CAAcN,GAAd,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIO,KAAK,GAAG;IACJ,MAAMjB,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACiB,KAAH,EAAP;EACH;EACD;AACJ;AACA;;;EACIC,MAAM,GAAG;IACL,MAAMlB,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACkB,MAAH,EAAP;EACH;EACD;AACJ;AACA;;;EACIC,IAAI,GAAG;IACH,MAAMnB,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACmB,IAAH,EAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,OAAO,CAACC,gBAAD,EAAmB;IACtB,MAAMrB,EAAE,GAAG,KAAKO,QAAL,EAAX;IACA,OAAOP,EAAE,CAACsB,OAAH,CAAWD,gBAAX,CAAP;EACH;;EACDE,gBAAgB,CAACb,GAAD,EAAM;IAClB,IAAIJ,EAAJ;;IACA,IAAI,CAAC,KAAKZ,oBAAV,EAAgC;MAC5B,MAAM,IAAIc,KAAJ,CAAU,kFAAV,CAAN;IACH,CAFD,MAGK;MACD,CAACF,EAAE,GAAG,KAAKZ,oBAAX,MAAqC,IAArC,IAA6CY,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAACiB,gBAAH,CAAoBb,GAApB,CAAtE;IACH;EACJ;;AArHgB"},"metadata":{},"sourceType":"module"}