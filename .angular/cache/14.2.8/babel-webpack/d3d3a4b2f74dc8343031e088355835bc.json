{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Direct Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst q = require(\"q\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst chrome_1 = require(\"selenium-webdriver/chrome\");\n\nconst exitCodes_1 = require(\"../exitCodes\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\n\nlet logger = new logger_1.Logger('direct');\n\nclass Direct extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    switch (this.config_.capabilities.browserName) {\n      case 'chrome':\n        logger.info('Using ChromeDriver directly...');\n        break;\n\n      case 'firefox':\n        logger.info('Using FirefoxDriver directly...');\n        break;\n\n      default:\n        throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName + ' is not supported with directConnect.');\n    }\n\n    return q.fcall(function () {});\n  }\n  /**\n   * Create a new driver.\n   *\n   * @public\n   * @override\n   * @return webdriver instance\n   */\n\n\n  getNewDriver() {\n    let driver;\n\n    switch (this.config_.capabilities.browserName) {\n      case 'chrome':\n        let chromeDriverFile;\n\n        if (this.config_.chromeDriver) {\n          chromeDriverFile = this.config_.chromeDriver;\n        } else {\n          try {\n            let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n            let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n            chromeDriverFile = updateConfig.chrome.last;\n          } catch (e) {\n            throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n          }\n        }\n\n        if (!fs.existsSync(chromeDriverFile)) {\n          throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + chromeDriverFile + '. Run \\'webdriver-manager update\\' to download binaries.');\n        }\n\n        let chromeService = new chrome_1.ServiceBuilder(chromeDriverFile).build(); // driver = ChromeDriver.createSession(new Capabilities(this.config_.capabilities),\n        // chromeService);\n        // TODO(ralphj): fix typings\n\n        driver = require('selenium-webdriver/chrome').Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), chromeService);\n        break;\n\n      case 'firefox':\n        let geckoDriverFile;\n\n        if (this.config_.geckoDriver) {\n          geckoDriverFile = this.config_.geckoDriver;\n        } else {\n          try {\n            let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n            let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n            geckoDriverFile = updateConfig.gecko.last;\n          } catch (e) {\n            throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n          }\n        }\n\n        if (!fs.existsSync(geckoDriverFile)) {\n          throw new exitCodes_1.BrowserError(logger, 'Could not find geckodriver at ' + geckoDriverFile + '. Run \\'webdriver-manager update\\' to download binaries.');\n        } // TODO (mgiambalvo): Turn this into an import when the selenium typings are updated.\n\n\n        const FirefoxServiceBuilder = require('selenium-webdriver/firefox').ServiceBuilder;\n\n        let firefoxService = new FirefoxServiceBuilder(geckoDriverFile).build(); // TODO(mgiambalvo): Fix typings.\n\n        driver = require('selenium-webdriver/firefox').Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), firefoxService);\n        break;\n\n      default:\n        throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName + ' is not supported with directConnect.');\n    }\n\n    this.drivers_.push(driver);\n    return driver;\n  }\n\n}\n\nexports.Direct = Direct;","map":{"version":3,"names":["Object","defineProperty","exports","value","fs","require","path","q","selenium_webdriver_1","chrome_1","exitCodes_1","logger_1","driverProvider_1","SeleniumConfig","Config","logger","Logger","Direct","DriverProvider","constructor","config","setupDriverEnv","config_","capabilities","browserName","info","BrowserError","fcall","getNewDriver","driver","chromeDriverFile","chromeDriver","updateJson","resolve","getSeleniumDir","updateConfig","JSON","parse","readFileSync","toString","chrome","last","e","existsSync","chromeService","ServiceBuilder","build","Driver","createSession","Capabilities","geckoDriverFile","geckoDriver","gecko","FirefoxServiceBuilder","firefoxService","drivers_","push"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/direct.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n *  This is an implementation of the Direct Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst chrome_1 = require(\"selenium-webdriver/chrome\");\nconst exitCodes_1 = require(\"../exitCodes\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\nlet logger = new logger_1.Logger('direct');\nclass Direct extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        switch (this.config_.capabilities.browserName) {\n            case 'chrome':\n                logger.info('Using ChromeDriver directly...');\n                break;\n            case 'firefox':\n                logger.info('Using FirefoxDriver directly...');\n                break;\n            default:\n                throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName +\n                    ' is not supported with directConnect.');\n        }\n        return q.fcall(function () { });\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @override\n     * @return webdriver instance\n     */\n    getNewDriver() {\n        let driver;\n        switch (this.config_.capabilities.browserName) {\n            case 'chrome':\n                let chromeDriverFile;\n                if (this.config_.chromeDriver) {\n                    chromeDriverFile = this.config_.chromeDriver;\n                }\n                else {\n                    try {\n                        let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                        let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                        chromeDriverFile = updateConfig.chrome.last;\n                    }\n                    catch (e) {\n                        throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' +\n                            'Run \\'webdriver-manager update\\' to download binaries.');\n                    }\n                }\n                if (!fs.existsSync(chromeDriverFile)) {\n                    throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + chromeDriverFile +\n                        '. Run \\'webdriver-manager update\\' to download binaries.');\n                }\n                let chromeService = new chrome_1.ServiceBuilder(chromeDriverFile).build();\n                // driver = ChromeDriver.createSession(new Capabilities(this.config_.capabilities),\n                // chromeService);\n                // TODO(ralphj): fix typings\n                driver =\n                    require('selenium-webdriver/chrome')\n                        .Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), chromeService);\n                break;\n            case 'firefox':\n                let geckoDriverFile;\n                if (this.config_.geckoDriver) {\n                    geckoDriverFile = this.config_.geckoDriver;\n                }\n                else {\n                    try {\n                        let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                        let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                        geckoDriverFile = updateConfig.gecko.last;\n                    }\n                    catch (e) {\n                        throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' +\n                            'Run \\'webdriver-manager update\\' to download binaries.');\n                    }\n                }\n                if (!fs.existsSync(geckoDriverFile)) {\n                    throw new exitCodes_1.BrowserError(logger, 'Could not find geckodriver at ' + geckoDriverFile +\n                        '. Run \\'webdriver-manager update\\' to download binaries.');\n                }\n                // TODO (mgiambalvo): Turn this into an import when the selenium typings are updated.\n                const FirefoxServiceBuilder = require('selenium-webdriver/firefox').ServiceBuilder;\n                let firefoxService = new FirefoxServiceBuilder(geckoDriverFile).build();\n                // TODO(mgiambalvo): Fix typings.\n                driver =\n                    require('selenium-webdriver/firefox')\n                        .Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), firefoxService);\n                break;\n            default:\n                throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName +\n                    ' is not supported with directConnect.');\n        }\n        this.drivers_.push(driver);\n        return driver;\n    }\n}\nexports.Direct = Direct;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}