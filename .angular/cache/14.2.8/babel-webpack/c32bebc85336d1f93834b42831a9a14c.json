{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * @fileoverview Defines types related to describing the capabilities of a\n * WebDriver session.\n */\n\nconst Symbols = require('./symbols');\n/**\n * Recognized browser names.\n * @enum {string}\n */\n\n\nconst Browser = {\n  ANDROID: 'android',\n  CHROME: 'chrome',\n  EDGE: 'MicrosoftEdge',\n  FIREFOX: 'firefox',\n  IE: 'internet explorer',\n  INTERNET_EXPLORER: 'internet explorer',\n  IPAD: 'iPad',\n  IPHONE: 'iPhone',\n  OPERA: 'opera',\n  PHANTOM_JS: 'phantomjs',\n  SAFARI: 'safari',\n  HTMLUNIT: 'htmlunit'\n};\n/**\n * Common Capability keys.\n * @enum {string}\n */\n\nconst Capability = {\n  /**\n   * Indicates whether a driver should accept all SSL certs by default. This\n   * capability only applies when requesting a new session. To query whether\n   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.\n   */\n  ACCEPT_SSL_CERTS: 'acceptSslCerts',\n\n  /**\n   * The browser name. Common browser names are defined in the {@link Browser}\n   * enum.\n   */\n  BROWSER_NAME: 'browserName',\n\n  /**\n   * Defines how elements should be scrolled into the viewport for interaction.\n   * This capability will be set to zero (0) if elements are aligned with the\n   * top of the viewport, or one (1) if aligned with the bottom. The default\n   * behavior is to align with the top of the viewport.\n   */\n  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',\n\n  /**\n   * Whether the driver is capable of handling modal alerts (e.g. alert,\n   * confirm, prompt). To define how a driver <i>should</i> handle alerts,\n   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.\n   */\n  HANDLES_ALERTS: 'handlesAlerts',\n\n  /**\n   * Key for the logging driver logging preferences.\n   */\n  LOGGING_PREFS: 'loggingPrefs',\n\n  /**\n   * Whether this session generates native events when simulating user input.\n   */\n  NATIVE_EVENTS: 'nativeEvents',\n\n  /**\n   * Describes the platform the browser is running on. Will be one of\n   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a\n   * session, ANY may be used to indicate no platform preference (this is\n   * semantically equivalent to omitting the platform capability).\n   */\n  PLATFORM: 'platform',\n\n  /**\n   * Describes the proxy configuration to use for a new WebDriver session.\n   */\n  PROXY: 'proxy',\n\n  /** Whether the driver supports changing the browser's orientation. */\n  ROTATABLE: 'rotatable',\n\n  /**\n   * Whether a driver is only capable of handling secure SSL certs. To request\n   * that a driver accept insecure SSL certs by default, use\n   * {@link #ACCEPT_SSL_CERTS}.\n   */\n  SECURE_SSL: 'secureSsl',\n\n  /** Whether the driver supports manipulating the app cache. */\n  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',\n\n  /** Whether the driver supports locating elements with CSS selectors. */\n  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',\n\n  /** Whether the browser supports JavaScript. */\n  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',\n\n  /** Whether the driver supports controlling the browser's location info. */\n  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',\n\n  /** Whether the driver supports taking screenshots. */\n  TAKES_SCREENSHOT: 'takesScreenshot',\n\n  /**\n   * Defines how the driver should handle unexpected alerts. The value should\n   * be one of \"accept\", \"dismiss\", or \"ignore\".\n   */\n  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehaviour',\n\n  /** Defines the browser version. */\n  VERSION: 'version'\n};\n/**\n * Describes how a proxy should be configured for a WebDriver session.\n * @record\n */\n\nfunction ProxyConfig() {}\n/**\n * The proxy type. Must be one of {\"manual\", \"pac\", \"system\"}.\n * @type {string}\n */\n\n\nProxyConfig.prototype.proxyType;\n/**\n * URL for the PAC file to use. Only used if {@link #proxyType} is \"pac\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.proxyAutoconfigUrl;\n/**\n * The proxy host for FTP requests. Only used if {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.ftpProxy;\n/**\n * The proxy host for HTTP requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.httpProxy;\n/**\n * The proxy host for HTTPS requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.sslProxy;\n/**\n * A comma delimited list of hosts which should bypass all proxies. Only used if\n * {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.noProxy;\n/**\n * Converts a generic hash object to a map.\n * @param {!Object<string, ?>} hash The hash object.\n * @return {!Map<string, ?>} The converted map.\n */\n\nfunction toMap(hash) {\n  let m = new Map();\n\n  for (let key in hash) {\n    if (hash.hasOwnProperty(key)) {\n      m.set(key, hash[key]);\n    }\n  }\n\n  return m;\n}\n/**\n * Describes a set of capabilities for a WebDriver session.\n */\n\n\nclass Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    if (other instanceof Capabilities) {\n      other = other.map_;\n    } else if (other && !(other instanceof Map)) {\n      other = toMap(other);\n    }\n    /** @private @const {!Map<string, ?>} */\n\n\n    this.map_ = new Map(other);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Android.\n   */\n\n\n  static android() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.ANDROID);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Chrome.\n   */\n\n\n  static chrome() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.\n   */\n\n\n  static edge() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.EDGE);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Firefox.\n   */\n\n\n  static firefox() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.\n   */\n\n\n  static ie() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPad.\n   */\n\n\n  static ipad() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.IPAD);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPhone.\n   */\n\n\n  static iphone() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.IPHONE);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Opera.\n   */\n\n\n  static opera() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.OPERA);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for PhantomJS.\n   */\n\n\n  static phantomjs() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Safari.\n   */\n\n\n  static safari() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.SAFARI);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit.\n   */\n\n\n  static htmlunit() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.HTMLUNIT);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit\n   *     with enabled Javascript.\n   */\n\n\n  static htmlunitwithjs() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.HTMLUNIT).set(Capability.SUPPORTS_JAVASCRIPT, true);\n  }\n  /**\n   * @return {!Object<string, ?>} The JSON representation of this instance.\n   *     Note, the returned object may contain nested promised values.\n   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from\n   *     Map).\n   */\n\n\n  [Symbols.serialize]() {\n    return serialize(this);\n  }\n  /**\n   * @param {string} key the parameter key to get.\n   * @return {T} the stored parameter value.\n   * @template T\n   */\n\n\n  get(key) {\n    return this.map_.get(key);\n  }\n  /**\n   * @param {string} key the key to test.\n   * @return {boolean} whether this capability set has the specified key.\n   */\n\n\n  has(key) {\n    return this.map_.has(key);\n  }\n  /**\n   * @return {!Iterator<string>} an iterator of the keys set.\n   */\n\n\n  keys() {\n    return this.map_.keys();\n  }\n  /** @return {number} The number of capabilities set. */\n\n\n  get size() {\n    return this.map_.size;\n  }\n  /**\n   * Merges another set of capabilities into this instance.\n   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other\n   *     set of capabilities to merge.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  merge(other) {\n    if (!other) {\n      throw new TypeError('no capabilities provided for merge');\n    }\n\n    let map;\n\n    if (other instanceof Capabilities) {\n      map = other.map_;\n    } else if (other instanceof Map) {\n      map = other;\n    } else {\n      other = toMap(other);\n    }\n\n    for (let key of other.keys()) {\n      this.set(key, other.get(key));\n    }\n\n    return this;\n  }\n  /**\n   * Deletes an entry from this set of capabilities.\n   *\n   * @param {string} key the capability key to delete.\n   */\n\n\n  delete(key) {\n    this.map_.delete(key);\n  }\n  /**\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Capabilities} A self reference.\n   * @throws {TypeError} If the `key` is not a string.\n   */\n\n\n  set(key, value) {\n    if (typeof key !== 'string') {\n      throw new TypeError('Capability keys must be strings: ' + typeof key);\n    }\n\n    this.map_.set(key, value);\n    return this;\n  }\n  /**\n   * Sets the logging preferences. Preferences may be specified as a\n   * {@link ./logging.Preferences} instance, or as a map of log-type to\n   * log-level.\n   * @param {!(./logging.Preferences|Object<string>)} prefs The logging\n   *     preferences.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setLoggingPrefs(prefs) {\n    return this.set(Capability.LOGGING_PREFS, prefs);\n  }\n  /**\n   * Sets the proxy configuration for this instance.\n   * @param {ProxyConfig} proxy The desired proxy configuration.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setProxy(proxy) {\n    return this.set(Capability.PROXY, proxy);\n  }\n  /**\n   * Sets whether native events should be used.\n   * @param {boolean} enabled Whether to enable native events.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setEnableNativeEvents(enabled) {\n    return this.set(Capability.NATIVE_EVENTS, enabled);\n  }\n  /**\n   * Sets how elements should be scrolled into view for interaction.\n   * @param {number} behavior The desired scroll behavior: either 0 to align\n   *     with the top of the viewport or 1 to align with the bottom.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setScrollBehavior(behavior) {\n    return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);\n  }\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   * @param {string} behavior The desired behavior should be \"accept\",\n   *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setAlertBehavior(behavior) {\n    return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);\n  }\n\n}\n/**\n * Serializes a capabilities object. This is defined as a standalone function\n * so it may be type checked (where Capabilities[Symbols.serialize] has type\n * checking disabled since it is defined with [] access on a struct).\n *\n * @param {!Capabilities} caps The capabilities to serialize.\n * @return {!Object<string, ?>} The JSON representation of this instance.\n *     Note, the returned object may contain nested promised values.\n */\n\n\nfunction serialize(caps) {\n  let ret = {};\n\n  for (let key of caps.keys()) {\n    let cap = caps.get(key);\n\n    if (cap !== undefined && cap !== null) {\n      ret[key] = cap;\n    }\n  }\n\n  return ret;\n} // PUBLIC API\n\n\nmodule.exports = {\n  Browser: Browser,\n  Capabilities: Capabilities,\n  Capability: Capability,\n  ProxyConfig: ProxyConfig\n};","map":{"version":3,"names":["Symbols","require","Browser","ANDROID","CHROME","EDGE","FIREFOX","IE","INTERNET_EXPLORER","IPAD","IPHONE","OPERA","PHANTOM_JS","SAFARI","HTMLUNIT","Capability","ACCEPT_SSL_CERTS","BROWSER_NAME","ELEMENT_SCROLL_BEHAVIOR","HANDLES_ALERTS","LOGGING_PREFS","NATIVE_EVENTS","PLATFORM","PROXY","ROTATABLE","SECURE_SSL","SUPPORTS_APPLICATION_CACHE","SUPPORTS_CSS_SELECTORS","SUPPORTS_JAVASCRIPT","SUPPORTS_LOCATION_CONTEXT","TAKES_SCREENSHOT","UNEXPECTED_ALERT_BEHAVIOR","VERSION","ProxyConfig","prototype","proxyType","proxyAutoconfigUrl","ftpProxy","httpProxy","sslProxy","noProxy","toMap","hash","m","Map","key","hasOwnProperty","set","Capabilities","constructor","other","undefined","map_","android","chrome","edge","firefox","ie","ipad","iphone","opera","phantomjs","safari","htmlunit","htmlunitwithjs","serialize","get","has","keys","size","merge","TypeError","map","delete","value","setLoggingPrefs","prefs","setProxy","proxy","setEnableNativeEvents","enabled","setScrollBehavior","behavior","setAlertBehavior","caps","ret","cap","module","exports"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/selenium-webdriver/lib/capabilities.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines types related to describing the capabilities of a\n * WebDriver session.\n */\n\nconst Symbols = require('./symbols');\n\n\n/**\n * Recognized browser names.\n * @enum {string}\n */\nconst Browser = {\n  ANDROID: 'android',\n  CHROME: 'chrome',\n  EDGE: 'MicrosoftEdge',\n  FIREFOX: 'firefox',\n  IE: 'internet explorer',\n  INTERNET_EXPLORER: 'internet explorer',\n  IPAD: 'iPad',\n  IPHONE: 'iPhone',\n  OPERA: 'opera',\n  PHANTOM_JS: 'phantomjs',\n  SAFARI: 'safari',\n  HTMLUNIT: 'htmlunit'\n};\n\n\n/**\n * Common Capability keys.\n * @enum {string}\n */\nconst Capability = {\n\n  /**\n   * Indicates whether a driver should accept all SSL certs by default. This\n   * capability only applies when requesting a new session. To query whether\n   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.\n   */\n  ACCEPT_SSL_CERTS: 'acceptSslCerts',\n\n\n  /**\n   * The browser name. Common browser names are defined in the {@link Browser}\n   * enum.\n   */\n  BROWSER_NAME: 'browserName',\n\n  /**\n   * Defines how elements should be scrolled into the viewport for interaction.\n   * This capability will be set to zero (0) if elements are aligned with the\n   * top of the viewport, or one (1) if aligned with the bottom. The default\n   * behavior is to align with the top of the viewport.\n   */\n  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',\n\n  /**\n   * Whether the driver is capable of handling modal alerts (e.g. alert,\n   * confirm, prompt). To define how a driver <i>should</i> handle alerts,\n   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.\n   */\n  HANDLES_ALERTS: 'handlesAlerts',\n\n  /**\n   * Key for the logging driver logging preferences.\n   */\n  LOGGING_PREFS: 'loggingPrefs',\n\n  /**\n   * Whether this session generates native events when simulating user input.\n   */\n  NATIVE_EVENTS: 'nativeEvents',\n\n  /**\n   * Describes the platform the browser is running on. Will be one of\n   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a\n   * session, ANY may be used to indicate no platform preference (this is\n   * semantically equivalent to omitting the platform capability).\n   */\n  PLATFORM: 'platform',\n\n  /**\n   * Describes the proxy configuration to use for a new WebDriver session.\n   */\n  PROXY: 'proxy',\n\n  /** Whether the driver supports changing the browser's orientation. */\n  ROTATABLE: 'rotatable',\n\n  /**\n   * Whether a driver is only capable of handling secure SSL certs. To request\n   * that a driver accept insecure SSL certs by default, use\n   * {@link #ACCEPT_SSL_CERTS}.\n   */\n  SECURE_SSL: 'secureSsl',\n\n  /** Whether the driver supports manipulating the app cache. */\n  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',\n\n  /** Whether the driver supports locating elements with CSS selectors. */\n  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',\n\n  /** Whether the browser supports JavaScript. */\n  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',\n\n  /** Whether the driver supports controlling the browser's location info. */\n  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',\n\n  /** Whether the driver supports taking screenshots. */\n  TAKES_SCREENSHOT: 'takesScreenshot',\n\n  /**\n   * Defines how the driver should handle unexpected alerts. The value should\n   * be one of \"accept\", \"dismiss\", or \"ignore\".\n   */\n  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehaviour',\n\n  /** Defines the browser version. */\n  VERSION: 'version'\n};\n\n\n/**\n * Describes how a proxy should be configured for a WebDriver session.\n * @record\n */\nfunction ProxyConfig() {}\n\n/**\n * The proxy type. Must be one of {\"manual\", \"pac\", \"system\"}.\n * @type {string}\n */\nProxyConfig.prototype.proxyType;\n\n/**\n * URL for the PAC file to use. Only used if {@link #proxyType} is \"pac\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.proxyAutoconfigUrl;\n\n/**\n * The proxy host for FTP requests. Only used if {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.ftpProxy;\n\n/**\n * The proxy host for HTTP requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.httpProxy;\n\n/**\n * The proxy host for HTTPS requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.sslProxy;\n\n/**\n * A comma delimited list of hosts which should bypass all proxies. Only used if\n * {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\nProxyConfig.prototype.noProxy;\n\n\n/**\n * Converts a generic hash object to a map.\n * @param {!Object<string, ?>} hash The hash object.\n * @return {!Map<string, ?>} The converted map.\n */\nfunction toMap(hash) {\n  let m = new Map;\n  for (let key in hash) {\n    if (hash.hasOwnProperty(key)) {\n      m.set(key, hash[key]);\n    }\n  }\n  return m;\n}\n\n\n/**\n * Describes a set of capabilities for a WebDriver session.\n */\nclass Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    if (other instanceof Capabilities) {\n      other = other.map_;\n    } else if (other && !(other instanceof Map)) {\n      other = toMap(other);\n    }\n    /** @private @const {!Map<string, ?>} */\n    this.map_ = new Map(other);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Android.\n   */\n  static android() {\n    return new Capabilities()\n        .set(Capability.BROWSER_NAME, Browser.ANDROID);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Chrome.\n   */\n  static chrome() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.\n   */\n  static edge() {\n    return new Capabilities()\n        .set(Capability.BROWSER_NAME, Browser.EDGE);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Firefox.\n   */\n  static firefox() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.\n   */\n  static ie() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPad.\n   */\n  static ipad() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.IPAD);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPhone.\n   */\n  static iphone() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.IPHONE);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Opera.\n   */\n  static opera() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.OPERA);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for PhantomJS.\n   */\n  static phantomjs() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Safari.\n   */\n  static safari() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.SAFARI);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit.\n   */\n  static htmlunit() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.HTMLUNIT);\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit\n   *     with enabled Javascript.\n   */\n  static htmlunitwithjs() {\n    return new Capabilities().\n        set(Capability.BROWSER_NAME, Browser.HTMLUNIT).\n        set(Capability.SUPPORTS_JAVASCRIPT, true);\n  }\n\n  /**\n   * @return {!Object<string, ?>} The JSON representation of this instance.\n   *     Note, the returned object may contain nested promised values.\n   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from\n   *     Map).\n   */\n  [Symbols.serialize]() {\n    return serialize(this);\n  }\n\n  /**\n   * @param {string} key the parameter key to get.\n   * @return {T} the stored parameter value.\n   * @template T\n   */\n  get(key) {\n    return this.map_.get(key);\n  }\n\n  /**\n   * @param {string} key the key to test.\n   * @return {boolean} whether this capability set has the specified key.\n   */\n  has(key) {\n    return this.map_.has(key);\n  }\n\n  /**\n   * @return {!Iterator<string>} an iterator of the keys set.\n   */\n  keys() {\n    return this.map_.keys();\n  }\n\n  /** @return {number} The number of capabilities set. */\n  get size() {\n    return this.map_.size;\n  }\n\n  /**\n   * Merges another set of capabilities into this instance.\n   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other\n   *     set of capabilities to merge.\n   * @return {!Capabilities} A self reference.\n   */\n  merge(other) {\n    if (!other) {\n      throw new TypeError('no capabilities provided for merge');\n    }\n\n    let map;\n    if (other instanceof Capabilities) {\n      map = other.map_;\n    } else if (other instanceof Map) {\n      map = other;\n    } else {\n      other = toMap(other);\n    }\n\n    for (let key of other.keys()) {\n      this.set(key, other.get(key));\n    }\n\n    return this;\n  }\n\n  /**\n   * Deletes an entry from this set of capabilities.\n   *\n   * @param {string} key the capability key to delete.\n   */\n  delete(key) {\n    this.map_.delete(key);\n  }\n\n  /**\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Capabilities} A self reference.\n   * @throws {TypeError} If the `key` is not a string.\n   */\n  set(key, value) {\n    if (typeof key !== 'string') {\n      throw new TypeError('Capability keys must be strings: ' + typeof key);\n    }\n    this.map_.set(key, value);\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences. Preferences may be specified as a\n   * {@link ./logging.Preferences} instance, or as a map of log-type to\n   * log-level.\n   * @param {!(./logging.Preferences|Object<string>)} prefs The logging\n   *     preferences.\n   * @return {!Capabilities} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    return this.set(Capability.LOGGING_PREFS, prefs);\n  }\n\n  /**\n   * Sets the proxy configuration for this instance.\n   * @param {ProxyConfig} proxy The desired proxy configuration.\n   * @return {!Capabilities} A self reference.\n   */\n  setProxy(proxy) {\n    return this.set(Capability.PROXY, proxy);\n  }\n\n  /**\n   * Sets whether native events should be used.\n   * @param {boolean} enabled Whether to enable native events.\n   * @return {!Capabilities} A self reference.\n   */\n  setEnableNativeEvents(enabled) {\n    return this.set(Capability.NATIVE_EVENTS, enabled);\n  }\n\n  /**\n   * Sets how elements should be scrolled into view for interaction.\n   * @param {number} behavior The desired scroll behavior: either 0 to align\n   *     with the top of the viewport or 1 to align with the bottom.\n   * @return {!Capabilities} A self reference.\n   */\n  setScrollBehavior(behavior) {\n    return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   * @param {string} behavior The desired behavior should be \"accept\",\n   *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n   * @return {!Capabilities} A self reference.\n   */\n  setAlertBehavior(behavior) {\n    return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);\n  }\n}\n\n\n/**\n * Serializes a capabilities object. This is defined as a standalone function\n * so it may be type checked (where Capabilities[Symbols.serialize] has type\n * checking disabled since it is defined with [] access on a struct).\n *\n * @param {!Capabilities} caps The capabilities to serialize.\n * @return {!Object<string, ?>} The JSON representation of this instance.\n *     Note, the returned object may contain nested promised values.\n */\nfunction serialize(caps) {\n  let ret = {};\n  for (let key of caps.keys()) {\n    let cap = caps.get(key);\n    if (cap !== undefined && cap !== null) {\n      ret[key] = cap;\n    }\n  }\n  return ret;\n}\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Browser: Browser,\n  Capabilities: Capabilities,\n  Capability: Capability,\n  ProxyConfig: ProxyConfig\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}