{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n'use strict';\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst url = require('url');\n\nconst httpLib = require('../lib/http');\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\n\n\nvar RequestOptions;\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\n\nfunction getRequestOptions(aUrl) {\n  let options = url.parse(aUrl);\n\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl);\n  } // Delete the search and has portions as they are not used.\n\n\n  options.search = null;\n  options.hash = null;\n  options.path = options.pathname;\n  return options;\n}\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\n\n\nclass HttpClient {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   */\n  constructor(serverUrl, opt_agent, opt_proxy) {\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null;\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n\n    this.options_ = getRequestOptions(serverUrl);\n    /**\n     * @private {?RequestOptions}\n     */\n\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;\n  }\n  /** @override */\n\n\n  send(httpRequest) {\n    let data;\n    let headers = {};\n    httpRequest.headers.forEach(function (value, name) {\n      headers[name] = value;\n    });\n    headers['Content-Length'] = 0;\n\n    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n      data = JSON.stringify(httpRequest.data);\n      headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n      headers['Content-Type'] = 'application/json;charset=UTF-8';\n    }\n\n    let path = this.options_.path;\n\n    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n      path += httpRequest.path.substring(1);\n    } else {\n      path += httpRequest.path;\n    }\n\n    let parsedPath = url.parse(path);\n    let options = {\n      agent: this.agent_ || null,\n      method: httpRequest.method,\n      auth: this.options_.auth,\n      hostname: this.options_.hostname,\n      port: this.options_.port,\n      protocol: this.options_.protocol,\n      path: parsedPath.path,\n      pathname: parsedPath.pathname,\n      search: parsedPath.search,\n      hash: parsedPath.hash,\n      headers\n    };\n    return new Promise((fulfill, reject) => {\n      sendRequest(options, fulfill, reject, data, this.proxyOptions_);\n    });\n  }\n\n}\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n */\n\n\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy) {\n  var hostname = options.hostname;\n  var port = options.port;\n\n  if (opt_proxy) {\n    let proxy =\n    /** @type {RequestOptions} */\n    opt_proxy; // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n\n    let absoluteUri = url.format(options); // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n\n    let targetHost = options.hostname;\n\n    if (options.port) {\n      targetHost += ':' + options.port;\n    } // Update the request options with our proxy info.\n\n\n    options.headers['Host'] = targetHost;\n    options.path = absoluteUri;\n    options.host = proxy.host;\n    options.hostname = proxy.hostname;\n    options.port = proxy.port;\n\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] = 'Basic ' + new Buffer(proxy.auth).toString('base64');\n    }\n  }\n\n  let requestFn = options.protocol === 'https:' ? https.request : http.request;\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      try {\n        var location = url.parse(response.headers['location']);\n      } catch (ex) {\n        onError(Error('Failed to parse \"Location\" header for server redirect: ' + ex.message + '\\nResponse was: \\n' + new httpLib.Response(response.statusCode, response.headers, '')));\n        return;\n      }\n\n      if (!location.hostname) {\n        location.hostname = hostname;\n        location.port = port;\n      }\n\n      request.abort();\n      sendRequest({\n        method: 'GET',\n        protocol: location.protocol || options.protocol,\n        hostname: location.hostname,\n        port: location.port,\n        path: location.path,\n        pathname: location.pathname,\n        search: location.search,\n        hash: location.hash,\n        headers: {\n          'Accept': 'application/json; charset=utf-8'\n        }\n      }, onOk, onError, undefined, opt_proxy);\n      return;\n    }\n\n    var body = [];\n    response.on('data', body.push.bind(body));\n    response.on('end', function () {\n      var resp = new httpLib.Response(\n      /** @type {number} */\n      response.statusCode,\n      /** @type {!Object<string>} */\n      response.headers, body.join('').replace(/\\0/g, ''));\n      onOk(resp);\n    });\n  });\n  request.on('error', function (e) {\n    if (e.code === 'ECONNRESET') {\n      setTimeout(function () {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy);\n      }, 15);\n    } else {\n      var message = e.message;\n\n      if (e.code) {\n        message = e.code + ' ' + message;\n      }\n\n      onError(new Error(message));\n    }\n  });\n\n  if (opt_data) {\n    request.write(opt_data);\n  }\n\n  request.end();\n} // PUBLIC API\n\n\nexports.Executor = httpLib.Executor;\nexports.HttpClient = HttpClient;\nexports.Request = httpLib.Request;\nexports.Response = httpLib.Response;","map":{"version":3,"names":["http","require","https","url","httpLib","RequestOptions","getRequestOptions","aUrl","options","parse","hostname","Error","search","hash","path","pathname","HttpClient","constructor","serverUrl","opt_agent","opt_proxy","agent_","options_","proxyOptions_","send","httpRequest","data","headers","forEach","value","name","method","JSON","stringify","Buffer","byteLength","endsWith","startsWith","substring","parsedPath","agent","auth","port","protocol","Promise","fulfill","reject","sendRequest","onOk","onError","opt_data","proxy","absoluteUri","format","targetHost","host","toString","requestFn","request","onResponse","response","statusCode","location","ex","message","Response","abort","undefined","body","on","push","bind","resp","join","replace","e","code","setTimeout","write","end","exports","Executor","Request"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/selenium-webdriver/http/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst url = require('url');\n\nconst httpLib = require('../lib/http');\n\n\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\nvar RequestOptions;\n\n\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\nfunction getRequestOptions(aUrl) {\n  let options = url.parse(aUrl);\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl);\n  }\n  // Delete the search and has portions as they are not used.\n  options.search = null;\n  options.hash = null;\n  options.path = options.pathname;\n  return options;\n}\n\n\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\nclass HttpClient {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   */\n  constructor(serverUrl, opt_agent, opt_proxy) {\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null;\n\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n    this.options_ = getRequestOptions(serverUrl);\n\n    /**\n     * @private {?RequestOptions}\n     */\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;\n  }\n\n  /** @override */\n  send(httpRequest) {\n    let data;\n\n    let headers = {};\n    httpRequest.headers.forEach(function(value, name) {\n      headers[name] = value;\n    });\n\n    headers['Content-Length'] = 0;\n    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n      data = JSON.stringify(httpRequest.data);\n      headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n      headers['Content-Type'] = 'application/json;charset=UTF-8';\n    }\n\n    let path = this.options_.path;\n    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n      path += httpRequest.path.substring(1);\n    } else {\n      path += httpRequest.path;\n    }\n    let parsedPath = url.parse(path);\n\n    let options = {\n      agent: this.agent_ || null,\n      method: httpRequest.method,\n\n      auth: this.options_.auth,\n      hostname: this.options_.hostname,\n      port: this.options_.port,\n      protocol: this.options_.protocol,\n\n      path: parsedPath.path,\n      pathname: parsedPath.pathname,\n      search: parsedPath.search,\n      hash: parsedPath.hash,\n\n      headers,\n    };\n\n    return new Promise((fulfill, reject) => {\n      sendRequest(options, fulfill, reject, data, this.proxyOptions_);\n    });\n  }\n}\n\n\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n */\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy) {\n  var hostname = options.hostname;\n  var port = options.port;\n\n  if (opt_proxy) {\n    let proxy = /** @type {RequestOptions} */(opt_proxy);\n\n    // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n    let absoluteUri = url.format(options);\n\n    // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n    let targetHost = options.hostname\n    if (options.port) {\n      targetHost += ':' + options.port;\n    }\n\n    // Update the request options with our proxy info.\n    options.headers['Host'] = targetHost;\n    options.path = absoluteUri;\n    options.host = proxy.host;\n    options.hostname = proxy.hostname;\n    options.port = proxy.port;\n\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] =\n          'Basic ' + new Buffer(proxy.auth).toString('base64');\n    }\n  }\n\n  let requestFn = options.protocol === 'https:' ? https.request : http.request;\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      try {\n        var location = url.parse(response.headers['location']);\n      } catch (ex) {\n        onError(Error(\n            'Failed to parse \"Location\" header for server redirect: ' +\n            ex.message + '\\nResponse was: \\n' +\n            new httpLib.Response(response.statusCode, response.headers, '')));\n        return;\n      }\n\n      if (!location.hostname) {\n        location.hostname = hostname;\n        location.port = port;\n      }\n\n      request.abort();\n      sendRequest({\n        method: 'GET',\n        protocol: location.protocol || options.protocol,\n        hostname: location.hostname,\n        port: location.port,\n        path: location.path,\n        pathname: location.pathname,\n        search: location.search,\n        hash: location.hash,\n        headers: {\n          'Accept': 'application/json; charset=utf-8'\n        }\n      }, onOk, onError, undefined, opt_proxy);\n      return;\n    }\n\n    var body = [];\n    response.on('data', body.push.bind(body));\n    response.on('end', function() {\n      var resp = new httpLib.Response(\n          /** @type {number} */(response.statusCode),\n          /** @type {!Object<string>} */(response.headers),\n          body.join('').replace(/\\0/g, ''));\n      onOk(resp);\n    });\n  });\n\n  request.on('error', function(e) {\n    if (e.code === 'ECONNRESET') {\n      setTimeout(function() {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy);\n      }, 15);\n    } else {\n      var message = e.message;\n      if (e.code) {\n        message = e.code + ' ' + message;\n      }\n      onError(new Error(message));\n    }\n  });\n\n  if (opt_data) {\n    request.write(opt_data);\n  }\n\n  request.end();\n}\n\n\n// PUBLIC API\n\nexports.Executor = httpLib.Executor;\nexports.HttpClient = HttpClient;\nexports.Request = httpLib.Request;\nexports.Response = httpLib.Response;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}