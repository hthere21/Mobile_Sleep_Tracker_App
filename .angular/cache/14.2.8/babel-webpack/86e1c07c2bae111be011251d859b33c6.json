{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nconst jszip = require('jszip');\n\nconst path = require('path');\n\nconst io = require('./index');\n\nconst {\n  InvalidArgumentError\n} = require('../lib/error');\n/**\n * Manages a zip archive.\n */\n\n\nclass Zip {\n  constructor() {\n    /** @private @const */\n    this.z_ = new jszip();\n    /** @private @const {!Set<!Promise<?>>} */\n\n    this.pendingAdds_ = new Set();\n  }\n  /**\n   * Adds a file to this zip.\n   *\n   * @param {string} filePath path to the file to add.\n   * @param {string=} zipPath path to the file in the zip archive, defaults\n   *     to the basename of `filePath`.\n   * @return {!Promise<?>} a promise that will resolve when added.\n   */\n\n\n  addFile(filePath, zipPath = path.basename(filePath)) {\n    let add = io.read(filePath).then(buffer => this.z_.file(\n    /** @type {string} */\n    zipPath, buffer));\n    this.pendingAdds_.add(add);\n    return add.then(() => this.pendingAdds_.delete(add), e => {\n      this.pendingAdds_.delete(add);\n      throw e;\n    });\n  }\n  /**\n   * Recursively adds a directory and all of its contents to this archive.\n   *\n   * @param {string} dirPath path to the directory to add.\n   * @param {string=} zipPath path to the folder in the archive to add the\n   *     directory contents to. Defaults to the root folder.\n   * @return {!Promise<?>} returns a promise that will resolve when the\n   *     the operation is complete.\n   */\n\n\n  addDir(dirPath, zipPath = '') {\n    return io.walkDir(dirPath).then(entries => {\n      let archive = this.z_;\n\n      if (zipPath) {\n        archive = archive.folder(zipPath);\n      }\n\n      let files = [];\n      entries.forEach(spec => {\n        if (spec.dir) {\n          archive.folder(spec.path);\n        } else {\n          files.push(this.addFile(path.join(dirPath, spec.path), path.join(zipPath, spec.path)));\n        }\n      });\n      return Promise.all(files);\n    });\n  }\n  /**\n   * @param {string} path File path to test for within the archive.\n   * @return {boolean} Whether this zip archive contains an entry with the given\n   *     path.\n   */\n\n\n  has(path) {\n    return this.z_.file(path) !== null;\n  }\n  /**\n   * Returns the contents of the file in this zip archive with the given `path`.\n   * The returned promise will be rejected with an {@link InvalidArgumentError}\n   * if either `path` does not exist within the archive, or if `path` refers\n   * to a directory.\n   *\n   * @param {string} path the path to the file whose contents to return.\n   * @return {!Promise<!Buffer>} a promise that will be resolved with the file's\n   *     contents as a buffer.\n   */\n\n\n  getFile(path) {\n    let file = this.z_.file(path);\n\n    if (!file) {\n      return Promise.reject(new InvalidArgumentError(`No such file in zip archive: ${path}`));\n    }\n\n    if (file.dir) {\n      return Promise.reject(new InvalidArgumentError(`The requested file is a directory: ${path}`));\n    }\n\n    return Promise.resolve(file.async('nodebuffer'));\n  }\n  /**\n   * Returns the compressed data for this archive in a buffer. _This method will\n   * not wait for any outstanding {@link #addFile add}\n   * {@link #addDir operations} before encoding the archive._\n   *\n   * @param {string} compression The desired compression.\n   *     Must be `STORE` (the default) or `DEFLATE`.\n   * @return {!Promise<!Buffer>} a promise that will resolve with this archive\n   *     as a buffer.\n   */\n\n\n  toBuffer(compression = 'STORE') {\n    if (compression !== 'STORE' && compression !== 'DEFLATE') {\n      return Promise.reject(new InvalidArgumentError(`compression must be one of {STORE, DEFLATE}, got ${compression}`));\n    }\n\n    return Promise.resolve(this.z_.generateAsync({\n      compression,\n      type: 'nodebuffer'\n    }));\n  }\n\n}\n/**\n * Asynchronously opens a zip archive.\n *\n * @param {string} path to the zip archive to load.\n * @return {!Promise<!Zip>} a promise that will resolve with the opened\n *     archive.\n */\n\n\nfunction load(path) {\n  return io.read(path).then(data => {\n    let zip = new Zip();\n    return zip.z_.loadAsync(data).then(() => zip);\n  });\n}\n/**\n * Asynchronously unzips an archive file.\n *\n * @param {string} src path to the source file to unzip.\n * @param {string} dst path to the destination directory.\n * @return {!Promise<string>} a promise that will resolve with `dst` once the\n *     archive has been unzipped.\n */\n\n\nfunction unzip(src, dst) {\n  return load(src).then(zip => {\n    let promisedDirs = new Map();\n    let promises = [];\n    zip.z_.forEach((relPath, file) => {\n      let p;\n\n      if (file.dir) {\n        p = createDir(relPath);\n      } else {\n        let dirname = path.dirname(relPath);\n\n        if (dirname === '.') {\n          p = writeFile(relPath, file);\n        } else {\n          p = createDir(dirname).then(() => writeFile(relPath, file));\n        }\n      }\n\n      promises.push(p);\n    });\n    return Promise.all(promises).then(() => dst);\n\n    function createDir(dir) {\n      let p = promisedDirs.get(dir);\n\n      if (!p) {\n        p = io.mkdirp(path.join(dst, dir));\n        promisedDirs.set(dir, p);\n      }\n\n      return p;\n    }\n\n    function writeFile(relPath, file) {\n      return file.async('nodebuffer').then(buffer => io.write(path.join(dst, relPath), buffer));\n    }\n  });\n} // PUBLIC API\n\n\nexports.Zip = Zip;\nexports.load = load;\nexports.unzip = unzip;","map":{"version":3,"names":["jszip","require","path","io","InvalidArgumentError","Zip","constructor","z_","pendingAdds_","Set","addFile","filePath","zipPath","basename","add","read","then","buffer","file","delete","e","addDir","dirPath","walkDir","entries","archive","folder","files","forEach","spec","dir","push","join","Promise","all","has","getFile","reject","resolve","async","toBuffer","compression","generateAsync","type","load","data","zip","loadAsync","unzip","src","dst","promisedDirs","Map","promises","relPath","p","createDir","dirname","writeFile","get","mkdirp","set","write","exports"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/selenium-webdriver/io/zip.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst jszip = require('jszip');\nconst path = require('path');\n\nconst io = require('./index');\nconst {InvalidArgumentError} = require('../lib/error');\n\n/**\n * Manages a zip archive.\n */\nclass Zip {\n  constructor() {\n    /** @private @const */\n    this.z_ = new jszip;\n\n    /** @private @const {!Set<!Promise<?>>} */\n    this.pendingAdds_ = new Set;\n  }\n\n  /**\n   * Adds a file to this zip.\n   *\n   * @param {string} filePath path to the file to add.\n   * @param {string=} zipPath path to the file in the zip archive, defaults\n   *     to the basename of `filePath`.\n   * @return {!Promise<?>} a promise that will resolve when added.\n   */\n  addFile(filePath, zipPath = path.basename(filePath)) {\n    let add = io.read(filePath)\n        .then(buffer => this.z_.file(/** @type {string} */(zipPath), buffer));\n    this.pendingAdds_.add(add);\n    return add.then(\n        () => this.pendingAdds_.delete(add),\n        (e) => {\n          this.pendingAdds_.delete(add);\n          throw e;\n        });\n  }\n\n  /**\n   * Recursively adds a directory and all of its contents to this archive.\n   *\n   * @param {string} dirPath path to the directory to add.\n   * @param {string=} zipPath path to the folder in the archive to add the\n   *     directory contents to. Defaults to the root folder.\n   * @return {!Promise<?>} returns a promise that will resolve when the\n   *     the operation is complete.\n   */\n  addDir(dirPath, zipPath = '') {\n    return io.walkDir(dirPath).then(entries => {\n      let archive = this.z_;\n      if (zipPath) {\n        archive = archive.folder(zipPath);\n      }\n\n      let files = [];\n      entries.forEach(spec => {\n        if (spec.dir) {\n          archive.folder(spec.path);\n        } else {\n          files.push(\n              this.addFile(\n                  path.join(dirPath, spec.path),\n                  path.join(zipPath, spec.path)));\n        }\n      });\n\n      return Promise.all(files);\n    });\n  }\n\n  /**\n   * @param {string} path File path to test for within the archive.\n   * @return {boolean} Whether this zip archive contains an entry with the given\n   *     path.\n   */\n  has(path) {\n    return this.z_.file(path) !== null;\n  }\n\n  /**\n   * Returns the contents of the file in this zip archive with the given `path`.\n   * The returned promise will be rejected with an {@link InvalidArgumentError}\n   * if either `path` does not exist within the archive, or if `path` refers\n   * to a directory.\n   *\n   * @param {string} path the path to the file whose contents to return.\n   * @return {!Promise<!Buffer>} a promise that will be resolved with the file's\n   *     contents as a buffer.\n   */\n  getFile(path) {\n    let file = this.z_.file(path);\n    if (!file) {\n      return Promise.reject(\n          new InvalidArgumentError(`No such file in zip archive: ${path}`));\n    }\n\n    if (file.dir) {\n      return Promise.reject(\n          new InvalidArgumentError(\n              `The requested file is a directory: ${path}`));\n    }\n\n    return Promise.resolve(file.async('nodebuffer'));\n  }\n\n  /**\n   * Returns the compressed data for this archive in a buffer. _This method will\n   * not wait for any outstanding {@link #addFile add}\n   * {@link #addDir operations} before encoding the archive._\n   *\n   * @param {string} compression The desired compression.\n   *     Must be `STORE` (the default) or `DEFLATE`.\n   * @return {!Promise<!Buffer>} a promise that will resolve with this archive\n   *     as a buffer.\n   */\n  toBuffer(compression = 'STORE') {\n    if (compression !== 'STORE' && compression !== 'DEFLATE') {\n      return Promise.reject(\n          new InvalidArgumentError(\n              `compression must be one of {STORE, DEFLATE}, got ${compression}`));\n    }\n    return Promise.resolve(\n        this.z_.generateAsync({compression, type: 'nodebuffer'}));\n  }\n}\n\n\n/**\n * Asynchronously opens a zip archive.\n *\n * @param {string} path to the zip archive to load.\n * @return {!Promise<!Zip>} a promise that will resolve with the opened\n *     archive.\n */\nfunction load(path) {\n  return io.read(path).then(data => {\n    let zip = new Zip;\n    return zip.z_.loadAsync(data).then(() => zip);\n  });\n}\n\n\n/**\n * Asynchronously unzips an archive file.\n *\n * @param {string} src path to the source file to unzip.\n * @param {string} dst path to the destination directory.\n * @return {!Promise<string>} a promise that will resolve with `dst` once the\n *     archive has been unzipped.\n */\nfunction unzip(src, dst) {\n  return load(src).then(zip => {\n    let promisedDirs = new Map;\n    let promises = [];\n\n    zip.z_.forEach((relPath, file) => {\n      let p;\n      if (file.dir) {\n        p = createDir(relPath);\n      } else {\n        let dirname = path.dirname(relPath);\n        if (dirname === '.') {\n          p = writeFile(relPath, file);\n        } else {\n          p = createDir(dirname).then(() => writeFile(relPath, file));\n        }\n      }\n      promises.push(p);\n    });\n\n    return Promise.all(promises).then(() => dst);\n\n    function createDir(dir) {\n      let p = promisedDirs.get(dir);\n      if (!p) {\n        p = io.mkdirp(path.join(dst, dir));\n        promisedDirs.set(dir, p);\n      }\n      return p;\n    }\n\n    function writeFile(relPath, file) {\n      return file.async('nodebuffer')\n          .then(buffer => io.write(path.join(dst, relPath), buffer));\n    }\n  });\n}\n\n\n// PUBLIC API\n\n\nexports.Zip = Zip;\nexports.load = load;\nexports.unzip = unzip;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}