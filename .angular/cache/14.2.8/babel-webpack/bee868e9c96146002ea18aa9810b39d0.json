{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst http = require(\"http\");\n\nconst url = require(\"url\");\n/**\n * Super dumb and simple WebDriver client. Works with selenium standalone, may or may not work yet\n * directly with other drivers.\n */\n\n\nclass SimpleWebDriverClient {\n  constructor(seleniumAddress) {\n    this.seleniumAddress = seleniumAddress;\n  }\n  /**\n   * Send an execute script command.\n   *\n   * @param sessionId\n   * @param data A JSON blob with the script and arguments to execute.\n   */\n\n\n  execute(sessionId, data) {\n    const url = ['session', sessionId, 'execute'].join('/');\n    return this.createSeleniumRequest('POST', url, data);\n  }\n  /**\n   * Send an execute async script command.\n   *\n   * @param sessionId\n   * @param data A JSON blob with the script and arguments to execute.\n   */\n\n\n  executeAsync(sessionId, data) {\n    const url = ['session', sessionId, 'execute_async'].join('/');\n    return this.createSeleniumRequest('POST', url, data);\n  }\n  /**\n   * Get the location of an element.\n   *\n   * @param sessionId\n   * @param elementId\n   * @returns Promise<{}> A promise that resolves with the x and y coordinates of the element.\n   */\n\n\n  getLocation(sessionId, elementId) {\n    const url = ['session', sessionId, 'element', elementId, 'location'].join('/');\n    return this.createSeleniumRequest('GET', url);\n  }\n  /**\n   * Get the size of an element.\n   *\n   * @param sessionId\n   * @param elementId\n   * @returns Promise<{}> A promise that resolves with the height and width of the element.\n   */\n\n\n  getSize(sessionId, elementId) {\n    const url = ['session', sessionId, 'element', elementId, 'size'].join('/');\n    return this.createSeleniumRequest('GET', url);\n  }\n\n  createSeleniumRequest(method, messageUrl, data) {\n    let parsedUrl = url.parse(this.seleniumAddress);\n    let options = {};\n    options['method'] = method;\n    options['path'] = parsedUrl.path + '/' + messageUrl;\n    options['hostname'] = parsedUrl.hostname;\n    options['port'] = parseInt(parsedUrl.port);\n    let request = http.request(options);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        request.write(data);\n      }\n\n      request.end();\n      request.on('response', resp => {\n        let respData = '';\n        resp.on('data', d => {\n          respData += d;\n        });\n        resp.on('error', err => {\n          reject(err);\n        });\n        resp.on('end', () => {\n          let response = JSON.parse(respData); // Selenium 3.5.x or greater\n\n          if (response.status && response.status > 0) {\n            console.error(`Got status ${response.status} from selenium`, response.value);\n            reject(JSON.stringify(response.value));\n          } // Selenium 3.0.x\n\n\n          if (response.state && response.state !== 'success') {\n            console.error(`Got response ${response.state} from selenium`, response.value);\n            reject(JSON.stringify(response.value));\n          }\n\n          resolve(response.value);\n        });\n      });\n    });\n  }\n\n}\n\nexports.SimpleWebDriverClient = SimpleWebDriverClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","http","require","url","SimpleWebDriverClient","constructor","seleniumAddress","execute","sessionId","data","join","createSeleniumRequest","executeAsync","getLocation","elementId","getSize","method","messageUrl","parsedUrl","parse","options","path","hostname","parseInt","port","request","Promise","resolve","reject","write","end","on","resp","respData","d","err","response","JSON","status","console","error","stringify","state"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/blocking-proxy/built/lib/simple_webdriver_client.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst url = require(\"url\");\n/**\n * Super dumb and simple WebDriver client. Works with selenium standalone, may or may not work yet\n * directly with other drivers.\n */\nclass SimpleWebDriverClient {\n    constructor(seleniumAddress) {\n        this.seleniumAddress = seleniumAddress;\n    }\n    /**\n     * Send an execute script command.\n     *\n     * @param sessionId\n     * @param data A JSON blob with the script and arguments to execute.\n     */\n    execute(sessionId, data) {\n        const url = ['session', sessionId, 'execute'].join('/');\n        return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Send an execute async script command.\n     *\n     * @param sessionId\n     * @param data A JSON blob with the script and arguments to execute.\n     */\n    executeAsync(sessionId, data) {\n        const url = ['session', sessionId, 'execute_async'].join('/');\n        return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Get the location of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the x and y coordinates of the element.\n     */\n    getLocation(sessionId, elementId) {\n        const url = ['session', sessionId, 'element', elementId, 'location'].join('/');\n        return this.createSeleniumRequest('GET', url);\n    }\n    /**\n     * Get the size of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the height and width of the element.\n     */\n    getSize(sessionId, elementId) {\n        const url = ['session', sessionId, 'element', elementId, 'size'].join('/');\n        return this.createSeleniumRequest('GET', url);\n    }\n    createSeleniumRequest(method, messageUrl, data) {\n        let parsedUrl = url.parse(this.seleniumAddress);\n        let options = {};\n        options['method'] = method;\n        options['path'] = parsedUrl.path + '/' + messageUrl;\n        options['hostname'] = parsedUrl.hostname;\n        options['port'] = parseInt(parsedUrl.port);\n        let request = http.request(options);\n        return new Promise((resolve, reject) => {\n            if (data) {\n                request.write(data);\n            }\n            request.end();\n            request.on('response', (resp) => {\n                let respData = '';\n                resp.on('data', (d) => {\n                    respData += d;\n                });\n                resp.on('error', (err) => {\n                    reject(err);\n                });\n                resp.on('end', () => {\n                    let response = JSON.parse(respData);\n                    // Selenium 3.5.x or greater\n                    if (response.status && response.status > 0) {\n                        console.error(`Got status ${response.status} from selenium`, response.value);\n                        reject(JSON.stringify(response.value));\n                    }\n                    // Selenium 3.0.x\n                    if (response.state && response.state !== 'success') {\n                        console.error(`Got response ${response.state} from selenium`, response.value);\n                        reject(JSON.stringify(response.value));\n                    }\n                    resolve(response.value);\n                });\n            });\n        });\n    }\n    ;\n}\nexports.SimpleWebDriverClient = SimpleWebDriverClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}