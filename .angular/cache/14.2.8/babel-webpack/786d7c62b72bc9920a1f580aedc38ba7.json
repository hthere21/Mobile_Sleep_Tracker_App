{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * The Cli contains the usage and the collection of programs.\n *\n * Printing help for all the programs in the following order:\n * usage, commands, and options. If the options are used in multiple programs,\n * it will list it once.\n */\n\nclass Cli {\n  constructor() {\n    this.programs = {};\n  }\n  /**\n   * Register a program to the command line interface.\n   * @returns The cli for method chaining.\n   */\n\n\n  program(prog) {\n    this.programs[prog.cmd] = prog;\n    return this;\n  }\n  /**\n   * Add a usage for the command line interface.\n   * @returns The cli for method chaining.\n   */\n\n\n  usage(usageText) {\n    this.usageText = usageText;\n    return this;\n  }\n  /**\n   * Prints help for the programs registered to the cli.\n   */\n\n\n  printHelp() {\n    console.log('Usage: ' + this.usageText);\n    console.log('\\nCommands:');\n    let cmdDescriptionPos = this.posCmdDescription();\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      prog.printCmd(cmdDescriptionPos);\n    }\n\n    let descriptionPos = this.posDescription();\n    let defaultPos = this.posDefault();\n    let extOptions = {};\n    console.log('\\nOptions:'); // print all options\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      prog.printOptions(descriptionPos, defaultPos, extOptions);\n    }\n  }\n  /**\n   * For commands, gets the position where the description should start so they\n   * are aligned.\n   * @returns The position where the command description should start.\n   */\n\n\n  posCmdDescription() {\n    let position = -1;\n\n    for (let cmd in this.programs) {\n      position = Math.max(position, cmd.length + 6);\n    }\n\n    return position;\n  }\n  /**\n   * For options, gets the position where the description should start so they\n   * are aligned.\n   * @returns The position where the option description should start.\n   */\n\n\n  posDescription() {\n    let position = -1;\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      position = Math.max(position, prog.posDescription());\n    }\n\n    return position;\n  }\n  /**\n   * For options, get the position where the default values should start so they\n   * are aligned.\n   * @returns The position where the option default values should start.\n   */\n\n\n  posDefault() {\n    let position = -1;\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      position = Math.max(position, prog.posDefault());\n    }\n\n    return position;\n  }\n  /**\n   * Go through all programs and add options to the collection.\n   * @returns The options used in the programs.\n   */\n\n\n  getOptions() {\n    let allOptions = {};\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      allOptions = prog.getOptions_(allOptions);\n    }\n\n    return allOptions;\n  }\n  /**\n   * Get the options used by the programs and create the minimist options\n   * to ensure that minimist parses the values properly.\n   * @returns The options for minimist.\n   */\n\n\n  getMinimistOptions() {\n    let allOptions = this.getOptions();\n    let minimistOptions = {};\n    let minimistBoolean = [];\n    let minimistString = [];\n    let minimistNumber = [];\n    let minimistDefault = {};\n\n    for (let opt in allOptions) {\n      let option = allOptions[opt];\n\n      if (option.type === 'boolean') {\n        minimistBoolean.push(option.opt);\n      } else if (option.type === 'string') {\n        minimistString.push(option.opt);\n      } else if (option.type === 'number') {\n        minimistNumber.push(option.opt);\n      }\n\n      if (typeof option.defaultValue !== 'undefined') {\n        minimistDefault[option.opt] = option.defaultValue;\n      }\n    }\n\n    minimistOptions['boolean'] = minimistBoolean;\n    minimistOptions['string'] = minimistString;\n    minimistOptions['number'] = minimistNumber;\n    minimistOptions['default'] = minimistDefault;\n    return minimistOptions;\n  }\n\n}\n\nexports.Cli = Cli;","map":{"version":3,"names":["Object","defineProperty","exports","value","Cli","constructor","programs","program","prog","cmd","usage","usageText","printHelp","console","log","cmdDescriptionPos","posCmdDescription","printCmd","descriptionPos","posDescription","defaultPos","posDefault","extOptions","printOptions","position","Math","max","length","getOptions","allOptions","getOptions_","getMinimistOptions","minimistOptions","minimistBoolean","minimistString","minimistNumber","minimistDefault","opt","option","type","push","defaultValue"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/webdriver-manager/built/lib/cli/cli.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The Cli contains the usage and the collection of programs.\n *\n * Printing help for all the programs in the following order:\n * usage, commands, and options. If the options are used in multiple programs,\n * it will list it once.\n */\nclass Cli {\n    constructor() {\n        this.programs = {};\n    }\n    /**\n     * Register a program to the command line interface.\n     * @returns The cli for method chaining.\n     */\n    program(prog) {\n        this.programs[prog.cmd] = prog;\n        return this;\n    }\n    /**\n     * Add a usage for the command line interface.\n     * @returns The cli for method chaining.\n     */\n    usage(usageText) {\n        this.usageText = usageText;\n        return this;\n    }\n    /**\n     * Prints help for the programs registered to the cli.\n     */\n    printHelp() {\n        console.log('Usage: ' + this.usageText);\n        console.log('\\nCommands:');\n        let cmdDescriptionPos = this.posCmdDescription();\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            prog.printCmd(cmdDescriptionPos);\n        }\n        let descriptionPos = this.posDescription();\n        let defaultPos = this.posDefault();\n        let extOptions = {};\n        console.log('\\nOptions:');\n        // print all options\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            prog.printOptions(descriptionPos, defaultPos, extOptions);\n        }\n    }\n    /**\n     * For commands, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the command description should start.\n     */\n    posCmdDescription() {\n        let position = -1;\n        for (let cmd in this.programs) {\n            position = Math.max(position, cmd.length + 6);\n        }\n        return position;\n    }\n    /**\n     * For options, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the option description should start.\n     */\n    posDescription() {\n        let position = -1;\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            position = Math.max(position, prog.posDescription());\n        }\n        return position;\n    }\n    /**\n     * For options, get the position where the default values should start so they\n     * are aligned.\n     * @returns The position where the option default values should start.\n     */\n    posDefault() {\n        let position = -1;\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            position = Math.max(position, prog.posDefault());\n        }\n        return position;\n    }\n    /**\n     * Go through all programs and add options to the collection.\n     * @returns The options used in the programs.\n     */\n    getOptions() {\n        let allOptions = {};\n        for (let cmd in this.programs) {\n            let prog = this.programs[cmd];\n            allOptions = prog.getOptions_(allOptions);\n        }\n        return allOptions;\n    }\n    /**\n     * Get the options used by the programs and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n    getMinimistOptions() {\n        let allOptions = this.getOptions();\n        let minimistOptions = {};\n        let minimistBoolean = [];\n        let minimistString = [];\n        let minimistNumber = [];\n        let minimistDefault = {};\n        for (let opt in allOptions) {\n            let option = allOptions[opt];\n            if (option.type === 'boolean') {\n                minimistBoolean.push(option.opt);\n            }\n            else if (option.type === 'string') {\n                minimistString.push(option.opt);\n            }\n            else if (option.type === 'number') {\n                minimistNumber.push(option.opt);\n            }\n            if (typeof option.defaultValue !== 'undefined') {\n                minimistDefault[option.opt] = option.defaultValue;\n            }\n        }\n        minimistOptions['boolean'] = minimistBoolean;\n        minimistOptions['string'] = minimistString;\n        minimistOptions['number'] = minimistNumber;\n        minimistOptions['default'] = minimistDefault;\n        return minimistOptions;\n    }\n}\nexports.Cli = Cli;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}