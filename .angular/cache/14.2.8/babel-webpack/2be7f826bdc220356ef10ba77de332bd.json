{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an implementation of the Local Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n *\n * TODO - it would be nice to do this in the launcher phase,\n * so that we only start the local selenium once per entire launch.\n */\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst q = require(\"q\");\n\nconst exitCodes_1 = require(\"../exitCodes\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\n\nconst remote = require('selenium-webdriver/remote');\n\nlet logger = new logger_1.Logger('local');\n\nclass Local extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n    this.server_ = null;\n  }\n  /**\n   * Helper to locate the default jar path if none is provided by the user.\n   * @private\n   */\n\n\n  addDefaultBinaryLocs_() {\n    if (!this.config_.seleniumServerJar) {\n      logger.debug('Attempting to find the SeleniumServerJar in the default ' + 'location used by webdriver-manager');\n\n      try {\n        let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n        let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n        this.config_.seleniumServerJar = updateConfig.standalone.last;\n      } catch (err) {\n        throw new exitCodes_1.BrowserError(logger, 'No update-config.json found.' + ' Run \\'webdriver-manager update\\' to download binaries.');\n      }\n    }\n\n    if (!fs.existsSync(this.config_.seleniumServerJar)) {\n      throw new exitCodes_1.BrowserError(logger, 'No selenium server jar found at ' + this.config_.seleniumServerJar + '. Run \\'webdriver-manager update\\' to download binaries.');\n    }\n\n    if (this.config_.capabilities.browserName === 'chrome') {\n      if (!this.config_.chromeDriver) {\n        logger.debug('Attempting to find the chromedriver binary in the default ' + 'location used by webdriver-manager');\n\n        try {\n          let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n          let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n          this.config_.chromeDriver = updateConfig.chrome.last;\n        } catch (err) {\n          throw new exitCodes_1.BrowserError(logger, 'No update-config.json found. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n        }\n      } // Check if file exists, if not try .exe or fail accordingly\n\n\n      if (!fs.existsSync(this.config_.chromeDriver)) {\n        if (fs.existsSync(this.config_.chromeDriver + '.exe')) {\n          this.config_.chromeDriver += '.exe';\n        } else {\n          throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + this.config_.chromeDriver + '. Run \\'webdriver-manager update\\' to download binaries.');\n        }\n      }\n    }\n\n    if (this.config_.capabilities.browserName === 'firefox') {\n      if (!this.config_.geckoDriver) {\n        logger.debug('Attempting to find the gecko driver binary in the default ' + 'location used by webdriver-manager');\n\n        try {\n          let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n          let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n          this.config_.geckoDriver = updateConfig.gecko.last;\n        } catch (err) {\n          throw new exitCodes_1.BrowserError(logger, 'No update-config.json found. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n        }\n      } // Check if file exists, if not try .exe or fail accordingly\n\n\n      if (!fs.existsSync(this.config_.geckoDriver)) {\n        if (fs.existsSync(this.config_.geckoDriver + '.exe')) {\n          this.config_.geckoDriver += '.exe';\n        } else {\n          throw new exitCodes_1.BrowserError(logger, 'Could not find gecko driver at ' + this.config_.geckoDriver + '. Run \\'webdriver-manager update\\' to download binaries.');\n        }\n      }\n    }\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @public\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    this.addDefaultBinaryLocs_();\n    logger.info('Starting selenium standalone server...');\n    let serverConf = this.config_.localSeleniumStandaloneOpts || {}; // If args or port is not set use seleniumArgs and seleniumPort\n    // for backward compatibility\n\n    if (serverConf.args === undefined) {\n      serverConf.args = this.config_.seleniumArgs || [];\n    }\n\n    if (serverConf.jvmArgs === undefined) {\n      serverConf.jvmArgs = this.config_.jvmArgs || [];\n    } else {\n      if (!Array.isArray(serverConf.jvmArgs)) {\n        throw new exitCodes_1.ConfigError(logger, 'jvmArgs should be an array.');\n      }\n    }\n\n    if (serverConf.port === undefined) {\n      serverConf.port = this.config_.seleniumPort;\n    } // configure server\n\n\n    if (this.config_.chromeDriver) {\n      serverConf.jvmArgs.push('-Dwebdriver.chrome.driver=' + this.config_.chromeDriver);\n    }\n\n    if (this.config_.geckoDriver) {\n      serverConf.jvmArgs.push('-Dwebdriver.gecko.driver=' + this.config_.geckoDriver);\n    }\n\n    this.server_ = new remote.SeleniumServer(this.config_.seleniumServerJar, serverConf);\n    let deferred = q.defer(); // start local server, grab hosted address, and resolve promise\n\n    this.server_.start(this.config_.seleniumServerStartTimeout).then(url => {\n      logger.info('Selenium standalone server started at ' + url);\n      return this.server_.address();\n    }).then(address => {\n      this.config_.seleniumAddress = address;\n      deferred.resolve();\n    }).catch(err => {\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  }\n  /**\n   * Teardown and destroy the environment and do any associated cleanup.\n   * Shuts down the drivers and server.\n   *\n   * @public\n   * @override\n   * @return {q.promise} A promise which will resolve when the environment\n   *     is down.\n   */\n\n\n  teardownEnv() {\n    return super.teardownEnv().then(() => {\n      logger.info('Shutting down selenium standalone server.');\n      return this.server_.stop();\n    });\n  }\n\n}\n\nexports.Local = Local;","map":{"version":3,"names":["Object","defineProperty","exports","value","fs","require","path","q","exitCodes_1","logger_1","driverProvider_1","SeleniumConfig","Config","remote","logger","Logger","Local","DriverProvider","constructor","config","server_","addDefaultBinaryLocs_","config_","seleniumServerJar","debug","updateJson","resolve","getSeleniumDir","updateConfig","JSON","parse","readFileSync","toString","standalone","last","err","BrowserError","existsSync","capabilities","browserName","chromeDriver","chrome","geckoDriver","gecko","setupDriverEnv","info","serverConf","localSeleniumStandaloneOpts","args","undefined","seleniumArgs","jvmArgs","Array","isArray","ConfigError","port","seleniumPort","push","SeleniumServer","deferred","defer","start","seleniumServerStartTimeout","then","url","address","seleniumAddress","catch","reject","promise","teardownEnv","stop"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/local.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * This is an implementation of the Local Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n *\n * TODO - it would be nice to do this in the launcher phase,\n * so that we only start the local selenium once per entire launch.\n */\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst q = require(\"q\");\nconst exitCodes_1 = require(\"../exitCodes\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\nconst remote = require('selenium-webdriver/remote');\nlet logger = new logger_1.Logger('local');\nclass Local extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n        this.server_ = null;\n    }\n    /**\n     * Helper to locate the default jar path if none is provided by the user.\n     * @private\n     */\n    addDefaultBinaryLocs_() {\n        if (!this.config_.seleniumServerJar) {\n            logger.debug('Attempting to find the SeleniumServerJar in the default ' +\n                'location used by webdriver-manager');\n            try {\n                let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                this.config_.seleniumServerJar = updateConfig.standalone.last;\n            }\n            catch (err) {\n                throw new exitCodes_1.BrowserError(logger, 'No update-config.json found.' +\n                    ' Run \\'webdriver-manager update\\' to download binaries.');\n            }\n        }\n        if (!fs.existsSync(this.config_.seleniumServerJar)) {\n            throw new exitCodes_1.BrowserError(logger, 'No selenium server jar found at ' + this.config_.seleniumServerJar +\n                '. Run \\'webdriver-manager update\\' to download binaries.');\n        }\n        if (this.config_.capabilities.browserName === 'chrome') {\n            if (!this.config_.chromeDriver) {\n                logger.debug('Attempting to find the chromedriver binary in the default ' +\n                    'location used by webdriver-manager');\n                try {\n                    let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                    let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                    this.config_.chromeDriver = updateConfig.chrome.last;\n                }\n                catch (err) {\n                    throw new exitCodes_1.BrowserError(logger, 'No update-config.json found. ' +\n                        'Run \\'webdriver-manager update\\' to download binaries.');\n                }\n            }\n            // Check if file exists, if not try .exe or fail accordingly\n            if (!fs.existsSync(this.config_.chromeDriver)) {\n                if (fs.existsSync(this.config_.chromeDriver + '.exe')) {\n                    this.config_.chromeDriver += '.exe';\n                }\n                else {\n                    throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + this.config_.chromeDriver +\n                        '. Run \\'webdriver-manager update\\' to download binaries.');\n                }\n            }\n        }\n        if (this.config_.capabilities.browserName === 'firefox') {\n            if (!this.config_.geckoDriver) {\n                logger.debug('Attempting to find the gecko driver binary in the default ' +\n                    'location used by webdriver-manager');\n                try {\n                    let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n                    let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n                    this.config_.geckoDriver = updateConfig.gecko.last;\n                }\n                catch (err) {\n                    throw new exitCodes_1.BrowserError(logger, 'No update-config.json found. ' +\n                        'Run \\'webdriver-manager update\\' to download binaries.');\n                }\n            }\n            // Check if file exists, if not try .exe or fail accordingly\n            if (!fs.existsSync(this.config_.geckoDriver)) {\n                if (fs.existsSync(this.config_.geckoDriver + '.exe')) {\n                    this.config_.geckoDriver += '.exe';\n                }\n                else {\n                    throw new exitCodes_1.BrowserError(logger, 'Could not find gecko driver at ' + this.config_.geckoDriver +\n                        '. Run \\'webdriver-manager update\\' to download binaries.');\n                }\n            }\n        }\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        this.addDefaultBinaryLocs_();\n        logger.info('Starting selenium standalone server...');\n        let serverConf = this.config_.localSeleniumStandaloneOpts || {};\n        // If args or port is not set use seleniumArgs and seleniumPort\n        // for backward compatibility\n        if (serverConf.args === undefined) {\n            serverConf.args = this.config_.seleniumArgs || [];\n        }\n        if (serverConf.jvmArgs === undefined) {\n            serverConf.jvmArgs = this.config_.jvmArgs || [];\n        }\n        else {\n            if (!Array.isArray(serverConf.jvmArgs)) {\n                throw new exitCodes_1.ConfigError(logger, 'jvmArgs should be an array.');\n            }\n        }\n        if (serverConf.port === undefined) {\n            serverConf.port = this.config_.seleniumPort;\n        }\n        // configure server\n        if (this.config_.chromeDriver) {\n            serverConf.jvmArgs.push('-Dwebdriver.chrome.driver=' + this.config_.chromeDriver);\n        }\n        if (this.config_.geckoDriver) {\n            serverConf.jvmArgs.push('-Dwebdriver.gecko.driver=' + this.config_.geckoDriver);\n        }\n        this.server_ = new remote.SeleniumServer(this.config_.seleniumServerJar, serverConf);\n        let deferred = q.defer();\n        // start local server, grab hosted address, and resolve promise\n        this.server_.start(this.config_.seleniumServerStartTimeout)\n            .then((url) => {\n            logger.info('Selenium standalone server started at ' + url);\n            return this.server_.address();\n        })\n            .then((address) => {\n            this.config_.seleniumAddress = address;\n            deferred.resolve();\n        })\n            .catch((err) => {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    }\n    /**\n     * Teardown and destroy the environment and do any associated cleanup.\n     * Shuts down the drivers and server.\n     *\n     * @public\n     * @override\n     * @return {q.promise} A promise which will resolve when the environment\n     *     is down.\n     */\n    teardownEnv() {\n        return super.teardownEnv().then(() => {\n            logger.info('Shutting down selenium standalone server.');\n            return this.server_.stop();\n        });\n    }\n}\nexports.Local = Local;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}