{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Attach Session Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nconst q = require(\"q\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst http = require('selenium-webdriver/http');\n\nlet logger = new logger_1.Logger('attachSession');\n\nclass AttachSession extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    logger.info('Using the selenium server at ' + this.config_.seleniumAddress);\n    logger.info('Using session id - ' + this.config_.seleniumSessionId);\n    return q(undefined);\n  }\n  /**\n   * Getting a new driver by attaching an existing session.\n   *\n   * @public\n   * @return {WebDriver} webdriver instance\n   */\n\n\n  getNewDriver() {\n    const httpClient = new http.HttpClient(this.config_.seleniumAddress);\n    const executor = new http.Executor(httpClient);\n    const newDriver = selenium_webdriver_1.WebDriver.attachToSession(executor, this.config_.seleniumSessionId);\n    this.drivers_.push(newDriver);\n    return newDriver;\n  }\n  /**\n   * Maintains the existing session and does not quit the driver.\n   *\n   * @public\n   */\n\n\n  quitDriver() {\n    return selenium_webdriver_1.promise.when(undefined);\n  }\n\n}\n\nexports.AttachSession = AttachSession;","map":{"version":3,"names":["Object","defineProperty","exports","value","q","require","selenium_webdriver_1","logger_1","driverProvider_1","http","logger","Logger","AttachSession","DriverProvider","constructor","config","setupDriverEnv","info","config_","seleniumAddress","seleniumSessionId","undefined","getNewDriver","httpClient","HttpClient","executor","Executor","newDriver","WebDriver","attachToSession","drivers_","push","quitDriver","promise","when"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/attachSession.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n *  This is an implementation of the Attach Session Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst http = require('selenium-webdriver/http');\nlet logger = new logger_1.Logger('attachSession');\nclass AttachSession extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        logger.info('Using the selenium server at ' + this.config_.seleniumAddress);\n        logger.info('Using session id - ' + this.config_.seleniumSessionId);\n        return q(undefined);\n    }\n    /**\n     * Getting a new driver by attaching an existing session.\n     *\n     * @public\n     * @return {WebDriver} webdriver instance\n     */\n    getNewDriver() {\n        const httpClient = new http.HttpClient(this.config_.seleniumAddress);\n        const executor = new http.Executor(httpClient);\n        const newDriver = selenium_webdriver_1.WebDriver.attachToSession(executor, this.config_.seleniumSessionId);\n        this.drivers_.push(newDriver);\n        return newDriver;\n    }\n    /**\n     * Maintains the existing session and does not quit the driver.\n     *\n     * @public\n     */\n    quitDriver() {\n        return selenium_webdriver_1.promise.when(undefined);\n    }\n}\nexports.AttachSession = AttachSession;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,oBAAD,CAApC;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,yBAAD,CAApB;;AACA,IAAIK,MAAM,GAAG,IAAIH,QAAQ,CAACI,MAAb,CAAoB,eAApB,CAAb;;AACA,MAAMC,aAAN,SAA4BJ,gBAAgB,CAACK,cAA7C,CAA4D;EACxDC,WAAW,CAACC,MAAD,EAAS;IAChB,MAAMA,MAAN;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,cAAc,GAAG;IACbN,MAAM,CAACO,IAAP,CAAY,kCAAkC,KAAKC,OAAL,CAAaC,eAA3D;IACAT,MAAM,CAACO,IAAP,CAAY,wBAAwB,KAAKC,OAAL,CAAaE,iBAAjD;IACA,OAAOhB,CAAC,CAACiB,SAAD,CAAR;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,YAAY,GAAG;IACX,MAAMC,UAAU,GAAG,IAAId,IAAI,CAACe,UAAT,CAAoB,KAAKN,OAAL,CAAaC,eAAjC,CAAnB;IACA,MAAMM,QAAQ,GAAG,IAAIhB,IAAI,CAACiB,QAAT,CAAkBH,UAAlB,CAAjB;IACA,MAAMI,SAAS,GAAGrB,oBAAoB,CAACsB,SAArB,CAA+BC,eAA/B,CAA+CJ,QAA/C,EAAyD,KAAKP,OAAL,CAAaE,iBAAtE,CAAlB;IACA,KAAKU,QAAL,CAAcC,IAAd,CAAmBJ,SAAnB;IACA,OAAOA,SAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIK,UAAU,GAAG;IACT,OAAO1B,oBAAoB,CAAC2B,OAArB,CAA6BC,IAA7B,CAAkCb,SAAlC,CAAP;EACH;;AAlCuD;;AAoC5DnB,OAAO,CAACU,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}