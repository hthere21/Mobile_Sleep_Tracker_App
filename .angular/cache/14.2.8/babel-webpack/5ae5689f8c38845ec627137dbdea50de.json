{"ast":null,"code":"\"use strict\";\n/*\n * This is an implementation of the SauceLabs Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst q = require(\"q\");\n\nconst util = require(\"util\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst SauceLabs = require('saucelabs');\n\nconst SAUCE_REGIONS = {\n  'us': '',\n  'eu': 'eu-central-1.'\n};\nlet logger = new logger_1.Logger('sauce');\n\nclass Sauce extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Hook to update the sauce job.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  updateJob(update) {\n    let deferredArray = this.drivers_.map(driver => {\n      let deferred = q.defer();\n      driver.getSession().then(session => {\n        logger.info('SauceLabs results available at http://saucelabs.com/jobs/' + session.getId());\n        this.sauceServer_.updateJob(session.getId(), update, err => {\n          if (err) {\n            throw new Error('Error updating Sauce pass/fail status: ' + util.inspect(err));\n          }\n\n          deferred.resolve();\n        });\n      });\n      return deferred.promise;\n    });\n    return q.all(deferredArray);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @public\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    let deferred = q.defer();\n    this.sauceServer_ = new SauceLabs({\n      hostname: this.getSauceEndpoint(this.config_.sauceRegion),\n      username: this.config_.sauceUser,\n      password: this.config_.sauceKey,\n      agent: this.config_.sauceAgent,\n      proxy: this.config_.sauceProxy\n    });\n    this.config_.capabilities['username'] = this.config_.sauceUser;\n    this.config_.capabilities['accessKey'] = this.config_.sauceKey;\n    this.config_.capabilities['build'] = this.config_.sauceBuild;\n    let protocol = this.config_.sauceSeleniumUseHttp ? 'http://' : 'https://';\n    let auth = protocol + this.config_.sauceUser + ':' + this.config_.sauceKey + '@';\n    this.config_.seleniumAddress = auth + (this.config_.sauceSeleniumAddress ? this.config_.sauceSeleniumAddress : `ondemand.${this.getSauceEndpoint(this.config_.sauceRegion)}:443/wd/hub`); // Append filename to capabilities.name so that it's easier to identify\n    // tests.\n\n    if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n      this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n    }\n\n    logger.info('Using SauceLabs selenium server at ' + this.config_.seleniumAddress.replace(/\\/\\/.+@/, '//'));\n    deferred.resolve();\n    return deferred.promise;\n  }\n  /**\n   * Get the Sauce Labs endpoint\n   * @private\n   * @param {string} region\n   * @return {string} The endpoint that needs to be used\n   */\n\n\n  getSauceEndpoint(region) {\n    const dc = region ? typeof SAUCE_REGIONS[region] !== 'undefined' ? SAUCE_REGIONS[region] : region + '.' : '';\n    return `${dc}saucelabs.com`;\n  }\n\n}\n\nexports.Sauce = Sauce;","map":{"version":3,"names":["Object","defineProperty","exports","value","q","require","util","logger_1","driverProvider_1","SauceLabs","SAUCE_REGIONS","logger","Logger","Sauce","DriverProvider","constructor","config","updateJob","update","deferredArray","drivers_","map","driver","deferred","defer","getSession","then","session","info","getId","sauceServer_","err","Error","inspect","resolve","promise","all","setupDriverEnv","hostname","getSauceEndpoint","config_","sauceRegion","username","sauceUser","password","sauceKey","agent","sauceAgent","proxy","sauceProxy","capabilities","sauceBuild","protocol","sauceSeleniumUseHttp","auth","seleniumAddress","sauceSeleniumAddress","name","shardTestFiles","specs","toString","replace","region","dc"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/sauce.js"],"sourcesContent":["\"use strict\";\n/*\n * This is an implementation of the SauceLabs Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst q = require(\"q\");\nconst util = require(\"util\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst SauceLabs = require('saucelabs');\nconst SAUCE_REGIONS = {\n    'us': '',\n    'eu': 'eu-central-1.'\n};\nlet logger = new logger_1.Logger('sauce');\nclass Sauce extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Hook to update the sauce job.\n     * @public\n     * @param {Object} update\n     * @return {q.promise} A promise that will resolve when the update is complete.\n     */\n    updateJob(update) {\n        let deferredArray = this.drivers_.map((driver) => {\n            let deferred = q.defer();\n            driver.getSession().then((session) => {\n                logger.info('SauceLabs results available at http://saucelabs.com/jobs/' + session.getId());\n                this.sauceServer_.updateJob(session.getId(), update, (err) => {\n                    if (err) {\n                        throw new Error('Error updating Sauce pass/fail status: ' + util.inspect(err));\n                    }\n                    deferred.resolve();\n                });\n            });\n            return deferred.promise;\n        });\n        return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        let deferred = q.defer();\n        this.sauceServer_ = new SauceLabs({\n            hostname: this.getSauceEndpoint(this.config_.sauceRegion),\n            username: this.config_.sauceUser,\n            password: this.config_.sauceKey,\n            agent: this.config_.sauceAgent,\n            proxy: this.config_.sauceProxy\n        });\n        this.config_.capabilities['username'] = this.config_.sauceUser;\n        this.config_.capabilities['accessKey'] = this.config_.sauceKey;\n        this.config_.capabilities['build'] = this.config_.sauceBuild;\n        let protocol = this.config_.sauceSeleniumUseHttp ? 'http://' : 'https://';\n        let auth = protocol + this.config_.sauceUser + ':' + this.config_.sauceKey + '@';\n        this.config_.seleniumAddress = auth +\n            (this.config_.sauceSeleniumAddress ?\n                this.config_.sauceSeleniumAddress :\n                `ondemand.${this.getSauceEndpoint(this.config_.sauceRegion)}:443/wd/hub`);\n        // Append filename to capabilities.name so that it's easier to identify\n        // tests.\n        if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n            this.config_.capabilities.name +=\n                (':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, ''));\n        }\n        logger.info('Using SauceLabs selenium server at ' +\n            this.config_.seleniumAddress.replace(/\\/\\/.+@/, '//'));\n        deferred.resolve();\n        return deferred.promise;\n    }\n    /**\n     * Get the Sauce Labs endpoint\n     * @private\n     * @param {string} region\n     * @return {string} The endpoint that needs to be used\n     */\n    getSauceEndpoint(region) {\n        const dc = region ?\n            typeof SAUCE_REGIONS[region] !== 'undefined' ? SAUCE_REGIONS[region] : (region + '.') :\n            '';\n        return `${dc}saucelabs.com`;\n    }\n}\nexports.Sauce = Sauce;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}