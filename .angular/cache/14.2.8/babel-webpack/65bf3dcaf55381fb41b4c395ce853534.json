{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst q = require(\"q\");\n\nconst util = require(\"util\");\n\nconst exitCodes_1 = require(\"../exitCodes\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst BrowserstackClient = require('browserstack');\n\nlet logger = new logger_1.Logger('browserstack');\n\nclass BrowserStack extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Hook to update the BrowserStack job status.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  updateJob(update) {\n    let deferredArray = this.drivers_.map(driver => {\n      let deferred = q.defer();\n      driver.getSession().then(session => {\n        // Fetching BrowserStack session details.\n        this.browserstackClient.getSession(session.getId(), function (error, automate_session) {\n          if (error) {\n            logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n          } else {\n            if (automate_session && automate_session.browser_url) {\n              logger.info('BrowserStack results available at ' + automate_session.browser_url);\n            } else {\n              logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n            }\n          }\n        });\n        let jobStatus = update.passed ? 'completed' : 'error';\n        let statusObj = {\n          status: jobStatus\n        }; // Updating status of BrowserStack session.\n\n        this.browserstackClient.updateSession(session.getId(), statusObj, function (error, automate_session) {\n          if (error) {\n            throw new exitCodes_1.BrowserError(logger, 'Error updating BrowserStack pass/fail status: ' + util.inspect(error));\n          } else {\n            logger.info(automate_session);\n            deferred.resolve();\n          }\n        });\n      });\n      return deferred.promise;\n    });\n    return q.all(deferredArray);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    let deferred = q.defer();\n    this.config_.capabilities['browserstack.user'] = this.config_.browserstackUser;\n    this.config_.capabilities['browserstack.key'] = this.config_.browserstackKey;\n    this.config_.seleniumAddress = 'http://hub.browserstack.com/wd/hub';\n    this.browserstackClient = BrowserstackClient.createAutomateClient({\n      username: this.config_.browserstackUser,\n      password: this.config_.browserstackKey,\n      proxy: this.config_.browserstackProxy\n    }); // Append filename to capabilities.name so that it's easier to identify\n    // tests.\n\n    if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n      this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n    }\n\n    logger.info('Using BrowserStack selenium server at ' + this.config_.seleniumAddress);\n    deferred.resolve();\n    return deferred.promise;\n  }\n\n}\n\nexports.BrowserStack = BrowserStack;","map":{"version":3,"names":["Object","defineProperty","exports","value","q","require","util","exitCodes_1","logger_1","driverProvider_1","BrowserstackClient","logger","Logger","BrowserStack","DriverProvider","constructor","config","updateJob","update","deferredArray","drivers_","map","driver","deferred","defer","getSession","then","session","browserstackClient","getId","error","automate_session","info","browser_url","jobStatus","passed","statusObj","status","updateSession","BrowserError","inspect","resolve","promise","all","setupDriverEnv","config_","capabilities","browserstackUser","browserstackKey","seleniumAddress","createAutomateClient","username","password","proxy","browserstackProxy","name","shardTestFiles","specs","toString","replace"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/protractor/built/driverProviders/browserStack.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst q = require(\"q\");\nconst util = require(\"util\");\nconst exitCodes_1 = require(\"../exitCodes\");\nconst logger_1 = require(\"../logger\");\nconst driverProvider_1 = require(\"./driverProvider\");\nconst BrowserstackClient = require('browserstack');\nlet logger = new logger_1.Logger('browserstack');\nclass BrowserStack extends driverProvider_1.DriverProvider {\n    constructor(config) {\n        super(config);\n    }\n    /**\n     * Hook to update the BrowserStack job status.\n     * @public\n     * @param {Object} update\n     * @return {q.promise} A promise that will resolve when the update is complete.\n     */\n    updateJob(update) {\n        let deferredArray = this.drivers_.map((driver) => {\n            let deferred = q.defer();\n            driver.getSession().then((session) => {\n                // Fetching BrowserStack session details.\n                this.browserstackClient.getSession(session.getId(), function (error, automate_session) {\n                    if (error) {\n                        logger.info('BrowserStack results available at ' +\n                            'https://www.browserstack.com/automate');\n                    }\n                    else {\n                        if (automate_session && automate_session.browser_url) {\n                            logger.info('BrowserStack results available at ' + automate_session.browser_url);\n                        }\n                        else {\n                            logger.info('BrowserStack results available at ' +\n                                'https://www.browserstack.com/automate');\n                        }\n                    }\n                });\n                let jobStatus = update.passed ? 'completed' : 'error';\n                let statusObj = { status: jobStatus };\n                // Updating status of BrowserStack session.\n                this.browserstackClient.updateSession(session.getId(), statusObj, function (error, automate_session) {\n                    if (error) {\n                        throw new exitCodes_1.BrowserError(logger, 'Error updating BrowserStack pass/fail status: ' + util.inspect(error));\n                    }\n                    else {\n                        logger.info(automate_session);\n                        deferred.resolve();\n                    }\n                });\n            });\n            return deferred.promise;\n        });\n        return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n    setupDriverEnv() {\n        let deferred = q.defer();\n        this.config_.capabilities['browserstack.user'] = this.config_.browserstackUser;\n        this.config_.capabilities['browserstack.key'] = this.config_.browserstackKey;\n        this.config_.seleniumAddress = 'http://hub.browserstack.com/wd/hub';\n        this.browserstackClient = BrowserstackClient.createAutomateClient({\n            username: this.config_.browserstackUser,\n            password: this.config_.browserstackKey,\n            proxy: this.config_.browserstackProxy\n        });\n        // Append filename to capabilities.name so that it's easier to identify\n        // tests.\n        if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n            this.config_.capabilities.name +=\n                (':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, ''));\n        }\n        logger.info('Using BrowserStack selenium server at ' + this.config_.seleniumAddress);\n        deferred.resolve();\n        return deferred.promise;\n    }\n}\nexports.BrowserStack = BrowserStack;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}