{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The {@linkplain Profile} class may be used to configure the browser profile\n * used with WebDriver, with functions to install additional\n * {@linkplain Profile#addExtension extensions}, configure browser\n * {@linkplain Profile#setPreference preferences}, and more. For example, you\n * may wish to include Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let profile = new firefox.Profile();\n *     profile.addExtension('/path/to/firebug.xpi');\n *     profile.setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let options = new firefox.Options().setProfile(profile);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Profile} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = new firefox.Profile(\n *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n'use strict';\n\nconst url = require('url');\n\nconst {\n  Binary,\n  Channel\n} = require('./binary'),\n      Profile = require('./profile').Profile,\n      http = require('../http'),\n      httpUtil = require('../http/util'),\n      io = require('../io'),\n      capabilities = require('../lib/capabilities'),\n      command = require('../lib/command'),\n      logging = require('../lib/logging'),\n      promise = require('../lib/promise'),\n      webdriver = require('../lib/webdriver'),\n      net = require('../net'),\n      portprober = require('../net/portprober'),\n      remote = require('../remote');\n/**\n * Configuration options for the FirefoxDriver.\n */\n\n\nclass Options {\n  constructor() {\n    /** @private {Profile} */\n    this.profile_ = null;\n    /** @private {(Binary|Channel|string|null)} */\n\n    this.binary_ = null;\n    /** @private {!Array<string>} */\n\n    this.args_ = [];\n    /** @private {logging.Preferences} */\n\n    this.logPrefs_ = null;\n    /** @private {?capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n\n\n  addArguments(...args) {\n    this.args_ = this.args_.concat(...args);\n    return this;\n  }\n  /**\n   * Configures the geckodriver to start Firefox in headless mode.\n   *\n   * @return {!Options} A self reference.\n   */\n\n\n  headless() {\n    return this.addArguments('-headless');\n  }\n  /**\n   * Sets the initial window size when running in\n   * {@linkplain #headless headless} mode.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n\n\n  windowSize({\n    width,\n    height\n  }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`--window-size=${width},${height}`);\n  }\n  /**\n   * Sets the profile to use. The profile may be specified as a\n   * {@link Profile} object or as the path to an existing Firefox profile to use\n   * as a template.\n   *\n   * @param {(string|!Profile)} profile The profile to use.\n   * @return {!Options} A self reference.\n   */\n\n\n  setProfile(profile) {\n    if (typeof profile === 'string') {\n      profile = new Profile(profile);\n    }\n\n    this.profile_ = profile;\n    return this;\n  }\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable, a specific {@link Channel}, or as a {@link Binary}\n   * object.\n   *\n   * @param {(string|!Binary|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n\n\n  setBinary(binary) {\n    if (binary instanceof Binary || binary instanceof Channel || typeof binary === 'string') {\n      this.binary_ = binary;\n      return this;\n    }\n\n    throw TypeError('binary must be a string path, Channel, or Binary object');\n  }\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n\n\n  setLoggingPreferences(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n\n\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n  /**\n   * Converts these options to a {@link capabilities.Capabilities} instance.\n   *\n   * @return {!capabilities.Capabilities} A new capabilities object.\n   */\n\n\n  toCapabilities() {\n    let caps = capabilities.Capabilities.firefox();\n    let firefoxOptions = {};\n    caps.set('moz:firefoxOptions', firefoxOptions);\n\n    if (this.logPrefs_) {\n      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n\n    if (this.args_.length) {\n      firefoxOptions['args'] = this.args_.concat();\n    }\n\n    if (this.binary_) {\n      if (this.binary_ instanceof Binary) {\n        let exe = this.binary_.getExe();\n\n        if (exe) {\n          firefoxOptions['binary'] = exe;\n        }\n\n        let args = this.binary_.getArguments();\n\n        if (args.length) {\n          if (this.args_.length) {\n            throw Error('You may specify browser arguments with Options.addArguments' + ' (preferred) or Binary.addArguments, but not both');\n          }\n\n          firefoxOptions['args'] = args;\n        }\n      } else if (this.binary_ instanceof Channel) {\n        firefoxOptions['binary'] = this.binary_.locate();\n      } else if (typeof this.binary_ === 'string') {\n        firefoxOptions['binary'] = this.binary_;\n      }\n    }\n\n    if (this.profile_) {\n      // If the user specified a template directory or any extensions to\n      // install, we need to encode the profile as a base64 string (which\n      // requires writing it to disk first). Otherwise, if the user just\n      // specified some custom preferences, we can send those directly.\n      let profile = this.profile_;\n\n      if (profile.getTemplateDir() || profile.getExtensions().length) {\n        firefoxOptions['profile'] = profile.encode();\n      } else {\n        let prefs = profile.getPreferences();\n\n        if (Object.keys(prefs).length) {\n          firefoxOptions['prefs'] = prefs;\n        }\n      }\n    }\n\n    return caps;\n  }\n\n}\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\n\n\nconst Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\"\n};\nconst GECKO_DRIVER_EXE = process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n/**\n * @return {string} .\n * @throws {Error}\n */\n\nfunction findGeckoDriver() {\n  let exe = io.findInPath(GECKO_DRIVER_EXE, true);\n\n  if (!exe) {\n    throw Error('The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' + 'PATH. Please download the latest version from ' + 'https://github.com/mozilla/geckodriver/releases/ ' + 'and ensure it can be found on your PATH.');\n  }\n\n  return exe;\n}\n\nfunction normalizeProxyConfiguration(config) {\n  if ('manual' === config.proxyType) {\n    if (config.ftpProxy && !config.ftpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.ftpProxy);\n      config.ftpProxy = hostAndPort.host;\n      config.ftpProxyPort = hostAndPort.port;\n    }\n\n    if (config.httpProxy && !config.httpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.httpProxy);\n      config.httpProxy = hostAndPort.host;\n      config.httpProxyPort = hostAndPort.port;\n    }\n\n    if (config.sslProxy && !config.sslProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.sslProxy);\n      config.sslProxy = hostAndPort.host;\n      config.sslProxyPort = hostAndPort.port;\n    }\n\n    if (config.socksProxy && !config.socksProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.socksProxy);\n      config.socksProxy = hostAndPort.host;\n      config.socksProxyPort = hostAndPort.port;\n    }\n  } else if ('pac' === config.proxyType) {\n    if (config.proxyAutoconfigUrl && !config.pacUrl) {\n      config.pacUrl = config.proxyAutoconfigUrl;\n    }\n  }\n\n  return config;\n}\n/** @enum {string} */\n\n\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext'\n};\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\n\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\n\n\nfunction configureExecutor(executor) {\n  executor.defineCommand(ExtensionCommand.GET_CONTEXT, 'GET', '/session/:sessionId/moz/context');\n  executor.defineCommand(ExtensionCommand.SET_CONTEXT, 'POST', '/session/:sessionId/moz/context');\n}\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\n\n\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver());\n    this.setLoopback(true); // Required.\n  }\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n\n\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v');\n  }\n\n}\n/**\n * A WebDriver client for Firefox.\n */\n\n\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash\n   *    object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor, opt_flow) {\n    let caps;\n\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = new capabilities.Capabilities(opt_config);\n    }\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      let proxy = normalizeProxyConfiguration(caps.get(capabilities.Capability.PROXY));\n      caps.set(capabilities.Capability.PROXY, proxy);\n    }\n\n    let executor;\n    let onQuit;\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor;\n      configureExecutor(executor);\n    } else if (opt_executor instanceof remote.DriverService) {\n      executor = createExecutor(opt_executor.start());\n\n      onQuit = () => opt_executor.kill();\n    } else {\n      let service = new ServiceBuilder().build();\n      executor = createExecutor(service.start());\n\n      onQuit = () => service.kill();\n    }\n\n    return (\n      /** @type {!Driver} */\n      super.createSession(executor, caps, opt_flow, onQuit)\n    );\n  }\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n\n\n  setFileDetector() {}\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!promise.Thenable<Context>} Current context.\n   */\n\n\n  getContext() {\n    return this.schedule(new command.Command(ExtensionCommand.GET_CONTEXT), 'get WebDriver.context');\n  }\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!promise.Thenable<void>} ctx The context to switch to.\n   */\n\n\n  setContext(ctx) {\n    return this.schedule(new command.Command(ExtensionCommand.SET_CONTEXT).setParameter(\"context\", ctx), 'set WebDriver.context');\n  }\n\n} // PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.Profile = Profile;\nexports.ServiceBuilder = ServiceBuilder;","map":{"version":3,"names":["url","require","Binary","Channel","Profile","http","httpUtil","io","capabilities","command","logging","promise","webdriver","net","portprober","remote","Options","constructor","profile_","binary_","args_","logPrefs_","proxy_","addArguments","args","concat","headless","windowSize","width","height","checkArg","arg","TypeError","setProfile","profile","setBinary","binary","setLoggingPreferences","prefs","setProxy","proxy","toCapabilities","caps","Capabilities","firefox","firefoxOptions","set","Capability","LOGGING_PREFS","PROXY","length","exe","getExe","getArguments","Error","locate","getTemplateDir","getExtensions","encode","getPreferences","Object","keys","Context","CONTENT","CHROME","GECKO_DRIVER_EXE","process","platform","findGeckoDriver","findInPath","normalizeProxyConfiguration","config","proxyType","ftpProxy","ftpProxyPort","hostAndPort","splitHostAndPort","host","port","httpProxy","httpProxyPort","sslProxy","sslProxyPort","socksProxy","socksProxyPort","proxyAutoconfigUrl","pacUrl","ExtensionCommand","GET_CONTEXT","SET_CONTEXT","createExecutor","serverUrl","client","then","HttpClient","executor","Executor","configureExecutor","defineCommand","ServiceBuilder","DriverService","Builder","opt_exe","setLoopback","enableVerboseLogging","opt_trace","Driver","WebDriver","createSession","opt_config","opt_executor","opt_flow","has","get","onQuit","start","kill","service","build","setFileDetector","getContext","schedule","Command","setContext","ctx","setParameter","exports"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/selenium-webdriver/firefox/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The {@linkplain Profile} class may be used to configure the browser profile\n * used with WebDriver, with functions to install additional\n * {@linkplain Profile#addExtension extensions}, configure browser\n * {@linkplain Profile#setPreference preferences}, and more. For example, you\n * may wish to include Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let profile = new firefox.Profile();\n *     profile.addExtension('/path/to/firebug.xpi');\n *     profile.setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let options = new firefox.Options().setProfile(profile);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Profile} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = new firefox.Profile(\n *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n\n'use strict';\n\nconst url = require('url');\n\nconst {Binary, Channel} = require('./binary'),\n    Profile = require('./profile').Profile,\n    http = require('../http'),\n    httpUtil = require('../http/util'),\n    io = require('../io'),\n    capabilities = require('../lib/capabilities'),\n    command = require('../lib/command'),\n    logging = require('../lib/logging'),\n    promise = require('../lib/promise'),\n    webdriver = require('../lib/webdriver'),\n    net = require('../net'),\n    portprober = require('../net/portprober'),\n    remote = require('../remote');\n\n\n/**\n * Configuration options for the FirefoxDriver.\n */\nclass Options {\n  constructor() {\n    /** @private {Profile} */\n    this.profile_ = null;\n\n    /** @private {(Binary|Channel|string|null)} */\n    this.binary_ = null;\n\n    /** @private {!Array<string>} */\n    this.args_ = [];\n\n    /** @private {logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    this.args_ = this.args_.concat(...args);\n    return this;\n  }\n\n  /**\n   * Configures the geckodriver to start Firefox in headless mode.\n   *\n   * @return {!Options} A self reference.\n   */\n  headless() {\n    return this.addArguments('-headless');\n  }\n\n  /**\n   * Sets the initial window size when running in\n   * {@linkplain #headless headless} mode.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({width, height}) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`--window-size=${width},${height}`);\n  }\n\n  /**\n   * Sets the profile to use. The profile may be specified as a\n   * {@link Profile} object or as the path to an existing Firefox profile to use\n   * as a template.\n   *\n   * @param {(string|!Profile)} profile The profile to use.\n   * @return {!Options} A self reference.\n   */\n  setProfile(profile) {\n    if (typeof profile === 'string') {\n      profile = new Profile(profile);\n    }\n    this.profile_ = profile;\n    return this;\n  }\n\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable, a specific {@link Channel}, or as a {@link Binary}\n   * object.\n   *\n   * @param {(string|!Binary|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n  setBinary(binary) {\n    if (binary instanceof Binary\n        || binary instanceof Channel\n        || typeof binary === 'string') {\n      this.binary_ = binary;\n      return this;\n    }\n    throw TypeError(\n        'binary must be a string path, Channel, or Binary object');\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPreferences(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Converts these options to a {@link capabilities.Capabilities} instance.\n   *\n   * @return {!capabilities.Capabilities} A new capabilities object.\n   */\n  toCapabilities() {\n    let caps = capabilities.Capabilities.firefox();\n    let firefoxOptions = {};\n    caps.set('moz:firefoxOptions', firefoxOptions);\n\n    if (this.logPrefs_) {\n      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n\n    if (this.args_.length) {\n      firefoxOptions['args'] = this.args_.concat();\n    }\n\n    if (this.binary_) {\n      if (this.binary_ instanceof Binary) {\n        let exe = this.binary_.getExe();\n        if (exe) {\n          firefoxOptions['binary'] = exe;\n        }\n\n        let args = this.binary_.getArguments();\n        if (args.length) {\n          if (this.args_.length) {\n            throw Error(\n                'You may specify browser arguments with Options.addArguments'\n                    + ' (preferred) or Binary.addArguments, but not both');\n          }\n          firefoxOptions['args'] = args;\n        }\n      } else if (this.binary_ instanceof Channel) {\n        firefoxOptions['binary'] = this.binary_.locate();\n\n      } else if (typeof this.binary_ === 'string') {\n        firefoxOptions['binary'] = this.binary_;\n      }\n    }\n\n    if (this.profile_) {\n      // If the user specified a template directory or any extensions to\n      // install, we need to encode the profile as a base64 string (which\n      // requires writing it to disk first). Otherwise, if the user just\n      // specified some custom preferences, we can send those directly.\n      let profile = this.profile_;\n      if (profile.getTemplateDir() || profile.getExtensions().length) {\n        firefoxOptions['profile'] = profile.encode();\n\n      } else {\n        let prefs = profile.getPreferences();\n        if (Object.keys(prefs).length) {\n          firefoxOptions['prefs'] = prefs;\n        }\n      }\n    }\n\n    return caps;\n  }\n}\n\n\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nconst Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\",\n};\n\n\nconst GECKO_DRIVER_EXE =\n    process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findGeckoDriver() {\n  let exe = io.findInPath(GECKO_DRIVER_EXE, true);\n  if (!exe) {\n    throw Error(\n      'The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' +\n      'PATH. Please download the latest version from ' +\n      'https://github.com/mozilla/geckodriver/releases/ ' +\n      'and ensure it can be found on your PATH.');\n  }\n  return exe;\n}\n\n\nfunction normalizeProxyConfiguration(config) {\n  if ('manual' === config.proxyType) {\n    if (config.ftpProxy && !config.ftpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.ftpProxy);\n      config.ftpProxy = hostAndPort.host;\n      config.ftpProxyPort = hostAndPort.port;\n    }\n\n    if (config.httpProxy && !config.httpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.httpProxy);\n      config.httpProxy = hostAndPort.host;\n      config.httpProxyPort = hostAndPort.port;\n    }\n\n    if (config.sslProxy && !config.sslProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.sslProxy);\n      config.sslProxy = hostAndPort.host;\n      config.sslProxyPort = hostAndPort.port;\n    }\n\n    if (config.socksProxy && !config.socksProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.socksProxy);\n      config.socksProxy = hostAndPort.host;\n      config.socksProxyPort = hostAndPort.port;\n    }\n  } else if ('pac' === config.proxyType) {\n    if (config.proxyAutoconfigUrl && !config.pacUrl) {\n      config.pacUrl = config.proxyAutoconfigUrl;\n    }\n  }\n  return config;\n}\n\n\n/** @enum {string} */\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n};\n\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n      ExtensionCommand.GET_CONTEXT,\n      'GET',\n      '/session/:sessionId/moz/context');\n\n  executor.defineCommand(\n      ExtensionCommand.SET_CONTEXT,\n      'POST',\n      '/session/:sessionId/moz/context');\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver());\n    this.setLoopback(true);  // Required.\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v');\n  }\n}\n\n\n/**\n * A WebDriver client for Firefox.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash\n   *    object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor, opt_flow) {\n    let caps;\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = new capabilities.Capabilities(opt_config);\n    }\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      let proxy =\n          normalizeProxyConfiguration(caps.get(capabilities.Capability.PROXY));\n      caps.set(capabilities.Capability.PROXY, proxy);\n    }\n\n    let executor;\n    let onQuit;\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor;\n      configureExecutor(executor);\n    } else if (opt_executor instanceof remote.DriverService) {\n      executor = createExecutor(opt_executor.start());\n      onQuit = () => opt_executor.kill();\n    } else {\n      let service = new ServiceBuilder().build();\n      executor = createExecutor(service.start());\n      onQuit = () => service.kill();\n    }\n\n    return /** @type {!Driver} */(super.createSession(\n        executor, caps, opt_flow, onQuit));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {\n  }\n\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!promise.Thenable<Context>} Current context.\n   */\n  getContext() {\n    return this.schedule(\n        new command.Command(ExtensionCommand.GET_CONTEXT),\n        'get WebDriver.context');\n  }\n\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!promise.Thenable<void>} ctx The context to switch to.\n   */\n  setContext(ctx) {\n    return this.schedule(\n        new command.Command(ExtensionCommand.SET_CONTEXT)\n            .setParameter(\"context\", ctx),\n        'set WebDriver.context');\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.Profile = Profile;\nexports.ServiceBuilder = ServiceBuilder;\n"],"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"},"metadata":{},"sourceType":"script"}