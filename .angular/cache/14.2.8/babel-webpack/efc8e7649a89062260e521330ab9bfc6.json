{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nlet Command = require('selenium-webdriver/lib/command').Command;\n\nclass Extender {\n  constructor(driver) {\n    this.driver_ = driver;\n    this.params_ = {};\n    this.executor_ = driver.getExecutor ? driver.getExecutor() : driver.executor_;\n  }\n  /**\n   * Defines a new command. When a command is sent, the {@code path} will be\n   * preprocessed using the command's parameters; any path segments prefixed\n   * with \":\" will be replaced by the parameter of the same name. For example,\n   * given \"/person/:name\" and the parameters \"{name: 'Bob'}\", the final command\n   * path will be \"/person/Bob\".\n   *\n   * @param {string} name The command name.\n   * @param {string} params The names of the parameters to the command\n   * @param {string} method The HTTP method to use when sending this command.\n   * @param {string} path The path to send the command to, relative to\n   *     the WebDriver server's command root and of the form\n   *     \"/path/:variable/segment\".\n   */\n\n\n  defineCommand(name, params, method, path) {\n    this.executor_.defineCommand(name, method, path);\n    this.params_[method + ':' + name] = params;\n  }\n  /**\n   * Executes a command which was defined by defineCommand()\n   *\n   * @param {string} name The command name.\n   * @param {*[]} params The parameters to the command\n   * @return {webdriver.promise.Promise<*>} A promise that will be resolved with\n   *     the command result\n   */\n\n\n  execCommand(name, method, params) {\n    var paramNames = this.params_[method + ':' + name];\n\n    if (paramNames === undefined) {\n      throw new RangeError('The command \"' + name + '\" has not yet been defined');\n    }\n\n    if (paramNames.length !== params.length) {\n      throw new RangeError('The command \"' + name + '\" expected ' + paramNames.length + ' parameters, got ' + params.length);\n    }\n\n    var command = new Command(name);\n\n    for (var i = 0; i < params.length; i++) {\n      if (params[i] !== undefined) {\n        command.setParameter(paramNames[i], params[i]);\n      }\n    }\n\n    return this.driver_.schedule(command, 'Custom Command: ' + name + '(' + params.map(x => {\n      if (typeof x == 'number' || typeof x == 'boolean' || typeof x == 'function') {\n        return x.toString();\n      } else if (x == null) {\n        return '' + x;\n      } else {\n        return JSON.stringify(x);\n      }\n    }).join(', ') + ')');\n  }\n\n}\n\nexports.Extender = Extender;","map":{"version":3,"names":["Object","defineProperty","exports","value","Command","require","Extender","constructor","driver","driver_","params_","executor_","getExecutor","defineCommand","name","params","method","path","execCommand","paramNames","undefined","RangeError","length","command","i","setParameter","schedule","map","x","toString","JSON","stringify","join"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/webdriver-js-extender/built/lib/extender.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet Command = require('selenium-webdriver/lib/command').Command;\nclass Extender {\n    constructor(driver) {\n        this.driver_ = driver;\n        this.params_ = {};\n        this.executor_ =\n            driver.getExecutor ? driver.getExecutor() : driver.executor_;\n    }\n    /**\n     * Defines a new command. When a command is sent, the {@code path} will be\n     * preprocessed using the command's parameters; any path segments prefixed\n     * with \":\" will be replaced by the parameter of the same name. For example,\n     * given \"/person/:name\" and the parameters \"{name: 'Bob'}\", the final command\n     * path will be \"/person/Bob\".\n     *\n     * @param {string} name The command name.\n     * @param {string} params The names of the parameters to the command\n     * @param {string} method The HTTP method to use when sending this command.\n     * @param {string} path The path to send the command to, relative to\n     *     the WebDriver server's command root and of the form\n     *     \"/path/:variable/segment\".\n     */\n    defineCommand(name, params, method, path) {\n        this.executor_.defineCommand(name, method, path);\n        this.params_[method + ':' + name] = params;\n    }\n    /**\n     * Executes a command which was defined by defineCommand()\n     *\n     * @param {string} name The command name.\n     * @param {*[]} params The parameters to the command\n     * @return {webdriver.promise.Promise<*>} A promise that will be resolved with\n     *     the command result\n     */\n    execCommand(name, method, params) {\n        var paramNames = this.params_[method + ':' + name];\n        if (paramNames === undefined) {\n            throw new RangeError('The command \"' + name + '\" has not yet been defined');\n        }\n        if (paramNames.length !== params.length) {\n            throw new RangeError('The command \"' + name + '\" expected ' + paramNames.length + ' parameters, got ' +\n                params.length);\n        }\n        var command = new Command(name);\n        for (var i = 0; i < params.length; i++) {\n            if (params[i] !== undefined) {\n                command.setParameter(paramNames[i], params[i]);\n            }\n        }\n        return this.driver_.schedule(command, 'Custom Command: ' + name + '(' +\n            params\n                .map((x) => {\n                if ((typeof x == 'number') || (typeof x == 'boolean') ||\n                    (typeof x == 'function')) {\n                    return x.toString();\n                }\n                else if (x == null) {\n                    return '' + x;\n                }\n                else {\n                    return JSON.stringify(x);\n                }\n            })\n                .join(', ') +\n            ')');\n    }\n}\nexports.Extender = Extender;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,gCAAD,CAAP,CAA0CD,OAAxD;;AACA,MAAME,QAAN,CAAe;EACXC,WAAW,CAACC,MAAD,EAAS;IAChB,KAAKC,OAAL,GAAeD,MAAf;IACA,KAAKE,OAAL,GAAe,EAAf;IACA,KAAKC,SAAL,GACIH,MAAM,CAACI,WAAP,GAAqBJ,MAAM,CAACI,WAAP,EAArB,GAA4CJ,MAAM,CAACG,SADvD;EAEH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIE,aAAa,CAACC,IAAD,EAAOC,MAAP,EAAeC,MAAf,EAAuBC,IAAvB,EAA6B;IACtC,KAAKN,SAAL,CAAeE,aAAf,CAA6BC,IAA7B,EAAmCE,MAAnC,EAA2CC,IAA3C;IACA,KAAKP,OAAL,CAAaM,MAAM,GAAG,GAAT,GAAeF,IAA5B,IAAoCC,MAApC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIG,WAAW,CAACJ,IAAD,EAAOE,MAAP,EAAeD,MAAf,EAAuB;IAC9B,IAAII,UAAU,GAAG,KAAKT,OAAL,CAAaM,MAAM,GAAG,GAAT,GAAeF,IAA5B,CAAjB;;IACA,IAAIK,UAAU,KAAKC,SAAnB,EAA8B;MAC1B,MAAM,IAAIC,UAAJ,CAAe,kBAAkBP,IAAlB,GAAyB,4BAAxC,CAAN;IACH;;IACD,IAAIK,UAAU,CAACG,MAAX,KAAsBP,MAAM,CAACO,MAAjC,EAAyC;MACrC,MAAM,IAAID,UAAJ,CAAe,kBAAkBP,IAAlB,GAAyB,aAAzB,GAAyCK,UAAU,CAACG,MAApD,GAA6D,mBAA7D,GACjBP,MAAM,CAACO,MADL,CAAN;IAEH;;IACD,IAAIC,OAAO,GAAG,IAAInB,OAAJ,CAAYU,IAAZ,CAAd;;IACA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACO,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;MACpC,IAAIT,MAAM,CAACS,CAAD,CAAN,KAAcJ,SAAlB,EAA6B;QACzBG,OAAO,CAACE,YAAR,CAAqBN,UAAU,CAACK,CAAD,CAA/B,EAAoCT,MAAM,CAACS,CAAD,CAA1C;MACH;IACJ;;IACD,OAAO,KAAKf,OAAL,CAAaiB,QAAb,CAAsBH,OAAtB,EAA+B,qBAAqBT,IAArB,GAA4B,GAA5B,GAClCC,MAAM,CACDY,GADL,CACUC,CAAD,IAAO;MACZ,IAAK,OAAOA,CAAP,IAAY,QAAb,IAA2B,OAAOA,CAAP,IAAY,SAAvC,IACC,OAAOA,CAAP,IAAY,UADjB,EAC8B;QAC1B,OAAOA,CAAC,CAACC,QAAF,EAAP;MACH,CAHD,MAIK,IAAID,CAAC,IAAI,IAAT,EAAe;QAChB,OAAO,KAAKA,CAAZ;MACH,CAFI,MAGA;QACD,OAAOE,IAAI,CAACC,SAAL,CAAeH,CAAf,CAAP;MACH;IACJ,CAZD,EAaKI,IAbL,CAaU,IAbV,CADkC,GAelC,GAfG,CAAP;EAgBH;;AAhEU;;AAkEf9B,OAAO,CAACI,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}