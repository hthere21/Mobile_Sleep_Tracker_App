{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst webdriver_commands_1 = require(\"./webdriver_commands\"); // Generate a random 8 character ID to avoid collisions.\n\n\nfunction getLogId() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36).slice(0, 8);\n} // Super proprietary left pad implementation. Do not copy plzkthx.\n\n\nfunction leftPad(field) {\n  const fieldWidth = 6;\n  let padding = fieldWidth - field.length;\n\n  if (padding > 0) {\n    return ' '.repeat(padding) + field;\n  }\n\n  return field;\n}\n\nconst FINDERS = [webdriver_commands_1.CommandName.FindElement, webdriver_commands_1.CommandName.FindElementFromElement, webdriver_commands_1.CommandName.FindElements, webdriver_commands_1.CommandName.FindElementsFromElement];\nconst READERS = [webdriver_commands_1.CommandName.GetElementTagName, webdriver_commands_1.CommandName.GetElementText, webdriver_commands_1.CommandName.GetElementAttribute, webdriver_commands_1.CommandName.GetElementProperty, webdriver_commands_1.CommandName.GetElementCSSValue, webdriver_commands_1.CommandName.GetElementRect];\nconst PAD = '    ';\n/**\n * Logs WebDriver commands, transforming the command into a user-friendly description.\n */\n\nclass WebDriverLogger {\n  constructor() {\n    this.logName = `webdriver_log_${getLogId()}.txt`;\n  }\n  /**\n   * Start logging to the specified directory. Will create a file named\n   * 'webdriver_log_<process id>.txt'\n   *\n   * @param logDir The directory to create log files in.\n   */\n\n\n  setLogDir(logDir) {\n    this.logStream = fs.createWriteStream(path.join(logDir, this.logName), {\n      flags: 'a'\n    });\n  }\n  /**\n   * Logs a webdriver command to the log file.\n   *\n   * @param command The command to log.\n   */\n\n\n  logWebDriverCommand(command) {\n    if (!this.logStream) {\n      return;\n    }\n\n    let logLine;\n    logLine = `${this.timestamp()} `;\n    let started = Date.now();\n    command.on('response', () => {\n      let done = Date.now();\n      let elapsed = leftPad(done - started + '');\n      logLine += `| ${elapsed}ms `;\n\n      if (command.getParam('sessionId')) {\n        let session = command.getParam('sessionId').slice(0, 6);\n        logLine += `| ${session} `;\n      } else if (command.commandName == webdriver_commands_1.CommandName.NewSession) {\n        // Only for new session commands, the sessionId is in the response.\n        let session = command.responseData['sessionId'].slice(0, 6);\n        logLine += `| ${session} `;\n      }\n\n      if (command.commandName == webdriver_commands_1.CommandName.UNKNOWN) {\n        logLine += `| ${command.url}`;\n      } else {\n        logLine += `| ${webdriver_commands_1.CommandName[command.commandName]}`;\n      }\n\n      if (command.commandName == webdriver_commands_1.CommandName.Go) {\n        logLine += ' ' + command.data['url'];\n      } else if (command.getParam('elementId')) {\n        logLine += ` (${command.getParam('elementId')})`;\n      }\n\n      logLine += '\\n';\n      this.logStream.write(logLine);\n      this.renderData(command);\n      this.renderResponse(command);\n    });\n  }\n  /**\n   * Log an arbitrary event to the log file.\n   *\n   * @param msg The message to log.\n   * @param sessionId The session id associated with the event.\n   * @param elapsedMs How long the event took, in ms.\n   */\n\n\n  logEvent(msg, sessionId, elapsedMs) {\n    let elapsed = leftPad(elapsedMs.toString());\n    let logLine = `${this.timestamp()} | ${elapsed}ms | ${sessionId.slice(0, 6)} | ${msg}\\n`;\n    this.logStream.write(logLine);\n  }\n\n  renderData(command) {\n    let dataLine = '';\n\n    if (command.commandName === webdriver_commands_1.CommandName.NewSession) {\n      dataLine = JSON.stringify(command.data['desiredCapabilities']);\n    } else if (command.commandName === webdriver_commands_1.CommandName.ElementSendKeys) {\n      let value = command.data['value'].join('');\n      dataLine = `Send: ${value}`;\n    } else if (FINDERS.indexOf(command.commandName) !== -1) {\n      const using = command.data['using'];\n      const value = command.data['value'];\n      dataLine = `Using ${using} '${value}'`;\n    }\n\n    if (dataLine) {\n      this.logStream.write(PAD + dataLine + '\\n');\n    }\n  }\n\n  renderResponse(command) {\n    let respLine = '';\n    const data = command.responseData;\n\n    if (data['status'] > 0) {\n      respLine = `ERROR ${data['status']}: ${data['value']['message']}`;\n    } else if (FINDERS.indexOf(command.commandName) !== -1) {\n      let els = command.responseData['value'];\n\n      if (!Array.isArray(els)) {\n        els = [els];\n      }\n\n      els = els.map(e => e['ELEMENT']);\n      respLine = 'Elements: ' + els;\n    } else if (READERS.indexOf(command.commandName) !== -1) {\n      respLine = command.responseData['value'];\n\n      if (typeof respLine == 'object') {\n        respLine = JSON.stringify(respLine);\n      }\n    }\n\n    if (respLine) {\n      this.logStream.write(PAD + respLine + '\\n');\n    }\n  }\n\n  timestamp() {\n    let d = new Date();\n    let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n    let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n    let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n    let millis = d.getMilliseconds().toString();\n    millis = '000'.slice(0, 3 - millis.length) + millis;\n    return `${hours}:${minutes}:${seconds}.${millis}`;\n  }\n\n}\n\nexports.WebDriverLogger = WebDriverLogger;","map":{"version":3,"names":["Object","defineProperty","exports","value","fs","require","path","webdriver_commands_1","getLogId","Math","floor","random","Number","MAX_SAFE_INTEGER","toString","slice","leftPad","field","fieldWidth","padding","length","repeat","FINDERS","CommandName","FindElement","FindElementFromElement","FindElements","FindElementsFromElement","READERS","GetElementTagName","GetElementText","GetElementAttribute","GetElementProperty","GetElementCSSValue","GetElementRect","PAD","WebDriverLogger","constructor","logName","setLogDir","logDir","logStream","createWriteStream","join","flags","logWebDriverCommand","command","logLine","timestamp","started","Date","now","on","done","elapsed","getParam","session","commandName","NewSession","responseData","UNKNOWN","url","Go","data","write","renderData","renderResponse","logEvent","msg","sessionId","elapsedMs","dataLine","JSON","stringify","ElementSendKeys","indexOf","using","respLine","els","Array","isArray","map","e","d","hours","getHours","minutes","getMinutes","seconds","getSeconds","millis","getMilliseconds"],"sources":["/Users/hthere215/Desktop/Study/Classes/INF4MTX 133/Project/Project 4/a4-sleeptracker-hthere21/sleeptracker/node_modules/blocking-proxy/built/lib/webdriver_logger.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst webdriver_commands_1 = require(\"./webdriver_commands\");\n// Generate a random 8 character ID to avoid collisions.\nfunction getLogId() {\n    return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36).slice(0, 8);\n}\n// Super proprietary left pad implementation. Do not copy plzkthx.\nfunction leftPad(field) {\n    const fieldWidth = 6;\n    let padding = fieldWidth - field.length;\n    if (padding > 0) {\n        return ' '.repeat(padding) + field;\n    }\n    return field;\n}\nconst FINDERS = [\n    webdriver_commands_1.CommandName.FindElement, webdriver_commands_1.CommandName.FindElementFromElement, webdriver_commands_1.CommandName.FindElements,\n    webdriver_commands_1.CommandName.FindElementsFromElement\n];\nconst READERS = [\n    webdriver_commands_1.CommandName.GetElementTagName, webdriver_commands_1.CommandName.GetElementText, webdriver_commands_1.CommandName.GetElementAttribute,\n    webdriver_commands_1.CommandName.GetElementProperty, webdriver_commands_1.CommandName.GetElementCSSValue, webdriver_commands_1.CommandName.GetElementRect\n];\nconst PAD = '    ';\n/**\n * Logs WebDriver commands, transforming the command into a user-friendly description.\n */\nclass WebDriverLogger {\n    constructor() {\n        this.logName = `webdriver_log_${getLogId()}.txt`;\n    }\n    /**\n     * Start logging to the specified directory. Will create a file named\n     * 'webdriver_log_<process id>.txt'\n     *\n     * @param logDir The directory to create log files in.\n     */\n    setLogDir(logDir) {\n        this.logStream = fs.createWriteStream(path.join(logDir, this.logName), { flags: 'a' });\n    }\n    /**\n     * Logs a webdriver command to the log file.\n     *\n     * @param command The command to log.\n     */\n    logWebDriverCommand(command) {\n        if (!this.logStream) {\n            return;\n        }\n        let logLine;\n        logLine = `${this.timestamp()} `;\n        let started = Date.now();\n        command.on('response', () => {\n            let done = Date.now();\n            let elapsed = leftPad((done - started) + '');\n            logLine += `| ${elapsed}ms `;\n            if (command.getParam('sessionId')) {\n                let session = command.getParam('sessionId').slice(0, 6);\n                logLine += `| ${session} `;\n            }\n            else if (command.commandName == webdriver_commands_1.CommandName.NewSession) {\n                // Only for new session commands, the sessionId is in the response.\n                let session = command.responseData['sessionId'].slice(0, 6);\n                logLine += `| ${session} `;\n            }\n            if (command.commandName == webdriver_commands_1.CommandName.UNKNOWN) {\n                logLine += `| ${command.url}`;\n            }\n            else {\n                logLine += `| ${webdriver_commands_1.CommandName[command.commandName]}`;\n            }\n            if (command.commandName == webdriver_commands_1.CommandName.Go) {\n                logLine += ' ' + command.data['url'];\n            }\n            else if (command.getParam('elementId')) {\n                logLine += ` (${command.getParam('elementId')})`;\n            }\n            logLine += '\\n';\n            this.logStream.write(logLine);\n            this.renderData(command);\n            this.renderResponse(command);\n        });\n    }\n    /**\n     * Log an arbitrary event to the log file.\n     *\n     * @param msg The message to log.\n     * @param sessionId The session id associated with the event.\n     * @param elapsedMs How long the event took, in ms.\n     */\n    logEvent(msg, sessionId, elapsedMs) {\n        let elapsed = leftPad(elapsedMs.toString());\n        let logLine = `${this.timestamp()} | ${elapsed}ms | ${sessionId.slice(0, 6)} | ${msg}\\n`;\n        this.logStream.write(logLine);\n    }\n    renderData(command) {\n        let dataLine = '';\n        if (command.commandName === webdriver_commands_1.CommandName.NewSession) {\n            dataLine = JSON.stringify(command.data['desiredCapabilities']);\n        }\n        else if (command.commandName === webdriver_commands_1.CommandName.ElementSendKeys) {\n            let value = command.data['value'].join('');\n            dataLine = `Send: ${value}`;\n        }\n        else if (FINDERS.indexOf(command.commandName) !== -1) {\n            const using = command.data['using'];\n            const value = command.data['value'];\n            dataLine = `Using ${using} '${value}'`;\n        }\n        if (dataLine) {\n            this.logStream.write(PAD + dataLine + '\\n');\n        }\n    }\n    renderResponse(command) {\n        let respLine = '';\n        const data = command.responseData;\n        if (data['status'] > 0) {\n            respLine = `ERROR ${data['status']}: ${data['value']['message']}`;\n        }\n        else if (FINDERS.indexOf(command.commandName) !== -1) {\n            let els = command.responseData['value'];\n            if (!Array.isArray(els)) {\n                els = [els];\n            }\n            els = els.map((e) => e['ELEMENT']);\n            respLine = 'Elements: ' + els;\n        }\n        else if (READERS.indexOf(command.commandName) !== -1) {\n            respLine = command.responseData['value'];\n            if (typeof respLine == 'object') {\n                respLine = JSON.stringify(respLine);\n            }\n        }\n        if (respLine) {\n            this.logStream.write(PAD + respLine + '\\n');\n        }\n    }\n    timestamp() {\n        let d = new Date();\n        let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n        let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n        let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n        let millis = d.getMilliseconds().toString();\n        millis = '000'.slice(0, 3 - millis.length) + millis;\n        return `${hours}:${minutes}:${seconds}.${millis}`;\n    }\n}\nexports.WebDriverLogger = WebDriverLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}